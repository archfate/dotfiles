#             _   _     _      _                 _ _
#  __ _  ___ | |_| |__ | | ___| |_ _   _    __ _| (_) __ _ ___
# / _` |/ _ \| __| '_ \| |/ _ \ __| | | |  / _` | | |/ _` / __|
#| (_| | (_) | |_| |_) | |  __/ |_| |_| | | (_| | | | (_| \__ \
# \__, |\___/ \__|_.__/|_|\___|\__|\__,_|  \__,_|_|_|\__,_|___/
# |___/
#
#       DESC: ZSH/BASH Compatible Alias/Functions
#
#       http://www.youtube.com/user/gotbletu
#       https://twitter.com/gotbletu
#       https://plus.google.com/+gotbletu
#       https://github.com/gotbletu
#       gotbletu@gmail.com


####################
##### SYSTEM #######
####################

#-------- Exports {{{
#------------------------------------------------------
# set display
export DISPLAY=:0

# set 256color support (doesnt work with older apps like abook)
export TERM="screen-256color"
# export TERM="xterm-256color"

# fix vlc no video issue
export VDPAU_DRIVER=va_gl

#}}}
#-------- Set Default Programs {{{
#------------------------------------------------------
# DESC: check and choose the first program in the array that is installed as the default

# find alternative apps if it is installed on your system
find_alt() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }

# set the default program
# the first program in the array that is detected on your system will be chosen as the default
export OPENER=$(find_alt xdg-open exo-open gnome-open )
export BROWSER=$(find_alt firefox $OPENER )
export BROWSERCLI=$(find_alt w3m links2 links lynx elinks $OPENER )
export BROWSERTOR=$(find_alt tor-browser-en)
export COMICER=$(find_alt mcomix comix zathura $OPENER )
export EBOOKER=$(find_alt ebook-viewer $OPENER )
export EDITOR=$(find_alt nvim vim vi emacs nano leafpad gedit pluma $OPENER )
export EDITORGUI=$(find_alt mousepad leafpad gedit pluma $OPENER )
export FILEMANAGER=$(find_alt pcmanfm thunar nautilus dolphin spacefm enlightenment_filemanager $OPENER )
export FILEMANAGERCLI=$(find_alt ranger vifm mc $OPENER )
export MUSICER=$(find_alt mpv mplayer mpg123 cvlc $OPENER )
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mpv mplayer ffplay cvlc $OPENER )
export READER=$(find_alt mupdf zathura evince $OPENER )
export ROOTER=$(find_alt gksudo kdesudo )
export IMAGEVIEWER=$(find_alt sxiv feh ristretto display eog $OPENER )
export QUEUER=$(find_alt tsp fq ts )
export TERMER=$(find_alt st urxvt xterm uxterm termite sakura lxterminal terminator mate-terminal pantheon-terminal konsole gnome-terminal xfce4-terminal $OPENER )

# }}}
#-------- Bash Color Code {{{
#------------------------------------------------------
# DESC: color code for bash compatible shell
# LINK: https://wiki.archlinux.org/index.php?title=Bash/Prompt_customization&oldid=419076#List_of_colors_for_prompt_and_Bash

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

# }}}
#-------- Blinking Bash Color Code {{{
#------------------------------------------------------
# DESC: blinking color code for bash compatible shell, only works on some terminals e.g xterm, urxvt

# Regular Colors
Blink_Black='\e[0;30;5m'        # Black
Blink_Red='\e[0;31;5m'          # Red
Blink_Green='\e[0;32;5m'        # Green
Blink_Yellow='\e[0;33;5m'       # Yellow
Blink_Blue='\e[0;34;5m'         # Blue
Blink_Purple='\e[0;35;5m'       # Purple
Blink_Cyan='\e[0;36;5m'         # Cyan
Blink_White='\e[0;37;5m'        # White

# Bold
Blink_BBlack='\e[1;30;5m'       # Black
Blink_BRed='\e[1;31;5m'         # Red
Blink_BGreen='\e[1;32;5m'       # Green
Blink_BYellow='\e[1;33;5m'      # Yellow
Blink_BBlue='\e[1;34;5m'        # Blue
Blink_BPurple='\e[1;35;5m'      # Purple
Blink_BCyan='\e[1;36;5m'        # Cyan
Blink_BWhite='\e[1;37;5m'       # White

# Underline
Blink_UBlack='\e[4;30;5m'       # Black
Blink_URed='\e[4;31;5m'         # Red
Blink_UGreen='\e[4;32;5m'       # Green
Blink_UYellow='\e[4;33;5m'      # Yellow
Blink_UBlue='\e[4;34;5m'        # Blue
Blink_UPurple='\e[4;35;5m'      # Purple
Blink_UCyan='\e[4;36;5m'        # Cyan
Blink_UWhite='\e[4;37;5m'       # White

# Background
Blink_On_Black='\e[40;5m'       # Black
Blink_On_Red='\e[41;5m'         # Red
Blink_On_Green='\e[42;5m'       # Green
Blink_On_Yellow='\e[43;5m'      # Yellow
Blink_On_Blue='\e[44;5m'        # Blue
Blink_On_Purple='\e[45;5m'      # Purple
Blink_On_Cyan='\e[46;5m'        # Cyan
Blink_On_White='\e[47;5m'       # White

# High Intensity
Blink_IBlack='\e[0;90;5m'       # Black
Blink_IRed='\e[0;91;5m'         # Red
Blink_IGreen='\e[0;92;5m'       # Green
Blink_IYellow='\e[0;93;5m'      # Yellow
Blink_IBlue='\e[0;94;5m'        # Blue
Blink_IPurple='\e[0;95;5m'      # Purple
Blink_ICyan='\e[0;96;5m'        # Cyan
Blink_IWhite='\e[0;97;5m'       # White

# Bold High Intensity
Blink_BIBlack='\e[1;90;5m'      # Black
Blink_BIRed='\e[1;91;5m'        # Red
Blink_BIGreen='\e[1;92;5m'      # Green
Blink_BIYellow='\e[1;93;5m'     # Yellow
Blink_BIBlue='\e[1;94;5m'       # Blue
Blink_BIPurple='\e[1;95;5m'     # Purple
Blink_BICyan='\e[1;96;5m'       # Cyan
Blink_BIWhite='\e[1;97;5m'      # White

# High Intensity backgrounds
Blink_On_IBlack='\e[0;100;5m'   # Black
Blink_On_IRed='\e[0;101;5m'     # Red
Blink_On_IGreen='\e[0;102;5m'   # Green
Blink_On_IYellow='\e[0;103;5m'  # Yellow
Blink_On_IBlue='\e[0;104;5m'    # Blue
Blink_On_IPurple='\e[10;95;5m'  # Purple
Blink_On_ICyan='\e[0;106;5m'    # Cyan
Blink_On_IWhite='\e[0;107;5m'   # White

# }}}
#-------- Set Path {{{
#------------------------------------------------------
# http://askubuntu.com/questions/49784/how-is-bin-added-to-my-path
# Local installed package
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi
if [ -d "$HOME/.screenlayout" ] ; then
	PATH="$HOME/.screenlayout:$PATH"
fi
# if [ -d "$HOME/.config/vifm/scripts" ] ; then
# 	PATH="$HOME/.config/vifm/scripts:$PATH"
# fi

# Go Packages (Golang)
export GOPATH=~/.go
export PATH="$PATH:$GOPATH/bin"

# NPM NodeJS Packages
if [ -d "$HOME/node_modules/.bin" ] ; then
    export PATH="$HOME/node_modules/.bin:$PATH"
fi

# User Scripts
if [ -d "$HOME/.scripts" ] ; then
    export PATH="$HOME/.scripts:$PATH"
fi

# if [ -d "$HOME/.scripts/command" ] ; then
#     export PATH="$HOME/.scripts/command:$PATH"
# fi

# }}}
#-------- External Files {{{
#------------------------------------------------------
if [ -f ~/.hintrc ]; then
    . ~/.hintrc
fi

# }}}
#-------- Configurations {{{
#------------------------------------------------------
cfg-aliasrc() { $EDITOR ~/.aliasrc ;}
cfg-autostartrc() { $EDITOR ~/.autostartrc ;}
cfg-bashrc() { $EDITOR ~/.bashrc ;}
cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh ;}
# https://wiki.archlinux.org/index.php/Cursor_Themes#Choosing_and_Configuring_Cursor_Themes
cfg-emacs() { $EDITOR ~/.emacs ;}
cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg ;}
cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg ;}
cfg-flexget() { $EDITOR ~/.flexget/config.yml ;}
cfg-fstab() { sudo $EDITOR /etc/fstab ;}
cfg-gitignore() { $EDITOR ~/Public/dotfiles/.gitignore ;}
cfg-greenclip() { killall greenclip ; $EDITOR ~/.config/greenclip.cfg && nohup greenclip daemon > /dev/null 2>&1 & }
cfg-group() { sudo $EDITOR /etc/group ;}
cfg-grub() { sudo $EDITOR /etc/default/grub ;}
cfg-hintrc() { $EDITOR ~/.hintrc ;}
cfg-hosts() { sudo $EDITOR /etc/hosts ;}
cfg-hyperterminal() { $EDITOR ~/.hyper.js ;}
cfg-i3wm() { $EDITOR ~/.i3/config ;}
cfg-inputrc() { $EDITOR ~/.inputrc ;}
cfg-internetarchive() { $EDITOR ~/.config/ia.ini ;} # archive.org downloader https://internetarchive.readthedocs.io/en/latest/
cfg-keynavrc() { $EDITOR ~/.keynavrc ;}
cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml ;}
cfg-kodi-confluencethumbnailview() { sudo $EDITOR /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml ;}
cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg ;}
cfg-livestreamer() { $EDITOR ~/.livestreamerrc ;}
cfg-mailcap() { $EDITOR ~/.mailcap ;}
cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc ;}
cfg-mc() { $EDITOR ~/.config/mc/ini ;}
cfg-mc-keymap() { $EDITOR ~/.config/mc/mc.keymap ;}
cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf ;}
cfg-megarc() { $EDITOR ~/.megarc ;}
cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
cfg-mpv() { $EDITOR ~/.config/mpv/mpv.conf ;}
cfg-mpv-input() { $EDITOR ~/.config/mpv/input.conf ;}
cfg-mocp() { $EDITOR ~/.moc/config ;}
cfg-muttrc() { $EDITOR ~/.muttrc ;}
cfg-nanorc() { $EDITOR ~/.nanorc;}
cfg-nap() { $EDITOR ~/.nap/napconf ;}
cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
cfg-netrc() { $EDITOR ~/.netrc;}
cfg-newsbeuter() { $EDITOR ~/.newsbeuter/config ;}
cfg-newsbeuter-queue() { $EDITOR ~/.newsbeuter/queue ;}
cfg-newsbeuter-urls() { $EDITOR ~/.newsbeuter/urls ;}
cfg-newsboat() { $EDITOR ~/.config/newsboat/config ;}
cfg-newsboat-queue() { $EDITOR ~/.config/newsboat/queue ;}
cfg-newsboat-urls() { $EDITOR ~/.config/newsboat/urls ;}
cfg-nvim() { $EDITOR ~/.config/nvim/init.vim ;}
cfg-pastebinit() { $EDITOR ~/.pastebinit.xml ;}
cfg-profile() { $EDITOR ~/.profile ;}
cfg-pulseaudio() { sudo $EDITOR /etc/pulse/default.pa ;}
cfg-pyload() { $EDITOR ~/.pyload/pyload.conf ;}
cfg-pyradio() { $EDITOR ~/.pyradio/stations.csv ;}
cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg ;}
cfg-rofibangs() { $EDITOR ~/.scripts/rofi-scripts-collection/rofi-bangs.sh ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
cfg-retroarch() { $EDITOR ~/.config/retroarch/retroarch.cfg ;}
cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg ;}
cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
cfg-ssh-client() { sudo $EDITOR /etc/ssh/ssh_config ;}
cfg-ssh-daemon() { sudo $EDITOR /etc/ssh/sshd_config ;}
cfg-sudoers() { sudo $EDITOR /etc/sudoers ;}
cfg-bookmarks() { $EDITOR ~/.config/surfraw/bookmarks ;}
cfg-sakura() { $EDITOR ~/.config/sakura/sakura.conf ;}
cfg-surfraw() { $EDITOR ~/.config/surfraw/conf ;}
cfg-syncthing() { $EDITOR ~/.config/syncthing/config.xml ;}
cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
cfg-tor() { sudo $EDITOR /etc/tor/torrc ;}
cfg-tor-user() { $EDITOR ~/.torrc ;}
cfg-torrentflix() { torrentflix --config=$EDITOR ;}
cfg-torrench() { $EDITOR ~/.config/torrench/config.ini ;}
cfg-tpb() { $EDITOR ~/.scripts/tpb.sh ;}
cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json ;}
cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg ;}
cfg-trz() { $EDITOR ~/.scripts/trz.sh ;}
cfg-turses() { $EDITOR ~/.turses/config ;}
cfg-urlview() { $EDITOR ~/.urlview ;}
cfg-updatedb() { sudo $EDITOR /etc/updatedb.conf ;}
cfg-vifmrc() { $EDITOR ~/.config/vifm/vifmrc ;}
#cfg-vimrc() { $EDITOR ~/.vimrc ;}
cfg-vimrc() { $EDITOR ~/.config/nvim/init.vim ;}
cfg-w3m() { $EDITOR ~/.w3m/config ;}
cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap ;}
cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap ;}
cfg-xbindkeysrc() { $EDITOR ~/.xbindkeysrc && killall xbindkeys ; xbindkeys ;}
cfg-sxhkd() { $EDITOR ~/.config/sxhkd/sxhkdrc ;}
cfg-xboxdrv() { sudo $EDITOR /etc/default/xboxdrv ;}
cfg-xmodmap() { $EDITOR ~/.Xmodmap ;}
cfg-xresources() { $EDITOR ~/.Xresources ;}
cfg-yaourtrc() { $EDITOR ~/.yaourtrc ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}
cfg-zurlrc() { $EDITOR ~/.zurlrc ;}
#}}}
#-------- Configurations Reload {{{
#------------------------------------------------------
rld-bashrc() { source ~/.bashrc ;}
rld-font() { fc-cache -v -f ;}
rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
rld-greenclip() { killall greenclip ; nohup greenclip daemon > /dev/null 2>&1 & }
rld-keynav() { killall keynav ; keynav daemonize ;}
rld-sxhkd() { killall sxhkd ; sxhkd ;}
rld-updatedb() { sudo updatedb ;}
rld-xbindkeys() { killall xbindkeys ; xbindkeys ;}
rld-hyperkey() { xmodmap ~/.Xmodmap; killall xcape ; xcape -e 'Hyper_L=Return' ; killall xbindkeys ; xbindkeys ;}
rld-xcape() { killall xcape ; xcape -e 'Hyper_L=Return' ;}
rld-xdefaults() { xrdb ~/.Xdefaults ;}
rld-xmodmap() { xmodmap ~/.Xmodmap ;}
rld-xmodmap-uskeyboardlayout() { setxkbmap -layout us ;} # reset back to US keyboard http://unix.stackexchange.com/a/151046
rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}
# }}}
#-------- Derez Files {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

derez-greenclip() { killall greenclip ; rm ~/.cache/greenclip.history && nohup greenclip daemon > /dev/null 2>&1 & }


# }}}
#-------- Alias (Substitution) {{{
#------------------------------------------------------
# DESC: alias for mainly for existing commands

alias bc='bc -q -l'					# dont show opening msg, use math library
# alias cal='cal -3 | grep --color -EC6 "\b$(date +%e | sed "s/ //g")"' # show calendar for 3 months
# alias cal='cal | grep --before-context 6 --after-context 6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias cal='cal -3m | grep -B6 -A6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias cp='cp -aiv'					# cp prompt confirmation
alias df='df -hT --total'				# human readable, print filetype, and total
alias du='du -d1 -h'					# max depth, human readable
alias emacs='emacs -nw'					# cli mode
alias feh='feh --auto-zoom --scale-down -g 1360x768 -B white'
alias free='free -h'					# human readable
alias info='info --vi-keys'				# GNU info act like man command
alias ln='ln -iv'
alias lsblk='lsblk -o "KNAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias mkdir='mkdir -p -v'				# create if not exist, verbose
alias mocp='padsp mocp'                                 # moc player working with pulseaudio
alias mount='mount | column -t'				# align in column
alias nano='nano -c -$'					# word wrapping
alias nvlc='nvlc --no-color'				# vlc black/white color
alias periscope='periscope -l en'			# get english subtitles
alias pdfgrep='pdfgrep -in'				# ignorecase, page number
alias qcp='qcp -f do'                                   # renameutils bulk copy (destination column only)
alias qmv='qmv -f do'                                   # renameutils bulk rename (destination column only)
alias rmdir='rmdir -v'			                # rm empty directory only
alias sr='sr -browser=$BROWSERCLI'			# open in cli browser
alias surfraw='surfraw -browser=$BROWSER'		# open in gui browser
alias w3m='w3m -num'					# w3m web browser with line number
alias wget='wget -N -c'					# continues/resumes
alias youtube-viewer='youtube-viewer -C -f -4 --results=6'  # color, fullscreen, 480p, number of results
alias visudo='sudo EDITOR="$EDITOR" visudo'
alias derez='rm -Iv'			                # rm interactive, prompt once only
alias uhaul='mv -iv --'					# mv prompt confirmation
alias mpv="mpv --input-ipc-server=/tmp/mpvsoc$(date +%s)" 
command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d" # Use neovim for vim if present.
alias vifm='vifmrun'
# color for common commands
# tutorial video: http://www.youtube.com/watch?v=RbVCzxnKJL4
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

## }}}
#-------- Alias (Good List) {{{
#------------------------------------------------------
# DESC: custom alias

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias ll='ls -l'
alias la='ls -lah'
alias gitlab='cd ~/gitlab'
alias gitclone='cd ~/gitclone'
alias cdloc='cd $(dirname $(locate "$1" | head -1)'

alias t="todo.sh"                                       # todotxt.sh program
alias trash='trash-put -v'
# alias vless="/usr/share/vim/vim74/macros/less.sh"       # vim as a pager
alias wttr='curl wttr.in'                               # wego weather forcast using only curl
alias getnews='curl getnews.tech/"$1"'                  # Get news topics via curl
alias cheatsh='curl cheat.sh/"$1"'                      # query any programing related cheatsheets with curl

# update host blacklist by ip
alias deny_ip='sudo wget https://hosts.ubuntu101.co.za/hosts.deny -O /etc/hosts.deny'
# }}}
#-------- Functions (Oneliner) {{{
#------------------------------------------------------

cpbak() { cp $1{,.bak} ;}		          # create backup copy
down4me() { curl -s "http://downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g' ;}   # check if a website is down
killall-zombies() { kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }') ;}  # kill zombie process
mkdircd() { mkdir -p -v $1; cd $1 ;}	          # create folder then cd into it
nohup-command() { nohup "$@" >/dev/null 2>&1& }   # background a process w/o error msg filling screen
open() { xdg-open "$@" > /dev/null 2>&1 ;}        # open with default GUI program

# }}}
#-------- Functions (Good List) {{{
#------------------------------------------------------
# DESC: custom functions

update-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-update() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-list() {
  RED='\033[0;31m'
  sudo grep "menuentry '" /boot/grub/grub.cfg | less -N
  echo -e "${RED} REMINDER: GRUB number starts at zero not one"
}

# DESC: color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
  LESS_TERMCAP_md=$'\E[01;31m' \
  LESS_TERMCAP_me=$'\E[0m' \
  LESS_TERMCAP_se=$'\E[0m' \
  LESS_TERMCAP_so=$'\E[01;44;33m' \
  LESS_TERMCAP_ue=$'\E[0m' \
  LESS_TERMCAP_us=$'\E[01;32m' \
  man "$@"
}

# list and grep with file permission
lsg() {
  keyword=$(echo "$@" |  sed 's/ /.*/g')
  ls -hlA --color=yes \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
  | grep -iE $keyword
}

# ls recent items at bottom with green TODAY yellow YESTERDAY substituted with file permission also
# https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# http://askubuntu.com/a/152005
lst() {
  ls -vAFqh --color=yes -got --time-style=long-iso "$@" \
  | sed "s/$(date +%Y-%m-%d)/\x1b[32m     TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

lsl() {
  ls -hl --color=yes "$@" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# DESC: cli calculator (Ctrl+D to exit)
# DEMO: http://www.youtube.com/watch?v=JkyodHenTuc
# LINK: http://docs.python.org/library/math.html
calc() {
  if which python2 &>/dev/null; then
    python2 -ic "from __future__ import division; from math import *; from random import *"
  elif which python3 &>/dev/null; then
    python3 -ic "from math import *; import cmath"
  elif which bc &>/dev/null; then
    bc -q -l
  else
    echo "Requires python2, python3 or bc for calculator features"
  fi
}


# http://www.webupd8.org/2016/08/easily-share-files-from-command-line.html
transfer() {
  if [ $# -lt 1 ]; then
    echo -e "Easy file sharing from the command line https://transfer.sh"
    echo -e "Usage:   $0 <filename>"
    echo -e "Example: $0 file.zip file2.txt file3.jpg"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tmpfile=$( mktemp -t transferXXX )
    if tty -s; then
      basefile=$(basename "$arg" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
      curl --progress-bar --upload-file "$arg" "https://transfer.sh/$basefile" >> $tmpfile
      else curl --progress-bar --upload-file "-" "https://transfer.sh/$arg" >> $tmpfile
    fi
    cat $tmpfile
    rm -f $tmpfile
  done
}

function taocl() {
    curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |
        sed '/cowsay[.]png/d' |
        pandoc -f markdown -t html |
        xmlstarlet fo --html --dropdtd |
        xmlstarlet sel -t -v "(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]" |
        xmlstarlet unesc | fmt -80 | iconv -t US
}

# Create a Bash file from template
function autosh()
{
    if [ "$1" ]; then
        if [ ! -f "$1.sh" ] && [ ! -f "$1" ]; then
            printf "${Green}Creating ${NC}$1\n"
                printf '%s\n' \
                '#!/usr/bin/env bash' \
                '# Description here' \
                > $1
                chmod +x $1
        else
            printf "${Red}File already exist.\n"
                fi
    else
        printf "${Red}No name specified.\n"
            fi
}

# }}}
#-------- System Information {{{
#------------------------------------------------------
m-sound() { arecord -L && arecord -l && cat /proc/asound/pcm ;} #List audio capture card/mic
m-distro() { uname -a && lsb_release -a ;}
m-connectip() {
  echo "--------------- Connected Devices -----------------"
    nmap -sn $(netstat -rn | awk 'FNR == 3 {print $2}')/24
  echo "---------------------------------------------------"
}

# uses ip or ifconfig, good on older or newer system
m-ip() {
  echo "--------------- Network Information ---------------"
  echo "router ip:" $(netstat -rn | awk 'FNR == 3 {print $2}')
  # newer system like archlinux
  ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1
  ip addr | awk '/global/ {print $3,$4}'
  ip addr | awk '/ether/ {print $1,$2}'
  ip addr | awk '/scope link/ {print $1,$2}' | cut -d\/ -f1
  # older system like debian
  ifconfig | awk '/inet addr/ {print $1,$2}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/Bcast/ {print $3}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/inet addr/ {print $4}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/HWaddr/ {print $4,$5}'
  ifconfig | awk '/Scope:Link/ {print $1,$3}' | cut -d\/ -f1
  # echo External IP $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
  # echo External IP: $(curl -s http://ipaddr.io/)
  # echo External IP: $(curl -s https://icanhazip.com/)
  # echo External IP: $(curl -s https://ifconfig.co/)
  # echo External IP: $(curl -s http://pasteip.me/api/cli/ && echo)
  echo external ip: $(curl -s http://ipecho.net/plain)
  echo "---------------------------------------------------"
}
#}}}
#-------- Gotbletu Universal Package Manager {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=N8CZhlIssdk
# DESC: auto detect package manager and loads proper alias for it

# legends# {{{
# https://wiki.archlinux.org/index.php/Pacman_Rosetta
# http://old-en.opensuse.org/Software_Management_Command_Line_Comparison
# https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
# Arch			-- pacman, yaourt
# Debian/Ubuntu		-- apt-get(apt), aptitude, dpkg
# Gentoo		-- eclean, emerge, equery, layman
# OpenSuse		-- zypper
# Red Hat/Fedora	-- package-cleanup, rpm, yum
# Suse			-- rug
# Not finish, only tested on Debian, Arch, Fedora so far

# cleanold; removes certain packages that can no longer be downloaded
# cleanall; remove all local cached packages
# list; show the content of an installed package
# localinstall; install package manually such as deb, rpm files downloaded
# own; find a command a package belongs to; ex: pkm-own convert
# purge; uninstall package and purge configuration files (not in /home)
# query; search for an already installed package
# refresh; update repository list
# upgrade; install the newest version from the repositories
# hold/unhold; stop/allow a package from being update
#
# missing
# emerge: autoclean, purge, list, query
# rug: pkm-info, clean, autoremove, autoclean, purge, list, query
# zypper: pkm-info, autoremove, autoclean, purge, list, query
# yum: autoclean, purge
# }}}

find_pkm() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }
export PKMGR=$(find_pkm yaourt pacman pacaur aptitude apt-get yum zypper emerge)

# {{{ apt-get
if [ "$PKMGR" = "apt-get" ]; then
  pkm-cleanallall() { sudo apt-get clean ;}
  pkm-cleanallold() { sudo apt-get autoclean ;}
  pkm-dependsreverse() { apt-cache rdepends "$@" ;}
  pkm-download() { wget $(apt-get --print-uris -y install "$@" | grep ^\'| cut -d\' -f2) ;}
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  # same as; echo "pkgname hold" | dpkg --set-selections
  pkm-hold() { sudo apt-mark hold "$@" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { apt-cache show "$@" ;}
  pkm-install() { sudo apt-get install --no-install-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo apt-get purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo apt-get update ;}
  pkm-remove() { sudo apt-get remove "$@" ;}
  pkm-remove-orphans() { sudo apt-get autoclean ;}
  pkm-search() { apt-cache search "$@" ;}
  pkm-unhold() { sudo apt-mark unhold "$@" ;}
  pkm-upgrade() { sudo apt-get update && sudo apt-get upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  # auto get missing gpg keys from launchpad
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
    # these are extra servers, just replace it if one is down
    # keyserver.ubuntu.com
    # pool.sks-keyservers.net
    # subkeys.pgp.net
    # pgp.mit.edu
    # keys.nayr.net
    # keys.gnupg.net
    # wwwkeys.en.pgp.net #(replace with your country code fr, en, de,etc)
# }}}
# {{{ aptitude
elif [ "$PKMGR" = "aptitude" ]; then
  pkm-cleanallall() { sudo aptitude clean ;}
  pkm-cleanallold() { sudo aptitude autoclean ;}
  pkm-dependsreverse() { aptitude why "$@" ;}
  pkm-download() { aptitude download "$@" ;} # need a better 1; deb w/ depends
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  pkm-hold() { echo "$1 hold" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /hold/" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { aptitude show "$@" ;}
  pkm-install() { sudo aptitude install --without-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo aptitude purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo aptitude update ;}
  pkm-remove() { sudo aptitude remove "$@" ;}
  pkm-remove-orphans() { sudo aptitude autoclean ;}
  pkm-search() { aptitude search "$*" ;}
    # fix  maybe with keyword $@ | sed / / ~d/
  pkm-search-description() { aptitude search ~d"$1"~d"$2"~d"$3"~d"$4"~d"$5"~d"$6"~d"$7" ;}
  pkm-unhold() { echo "$1 install" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /install/" ;}
  pkm-upgrade() { sudo aptitude update && sudo aptitude upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
# }}}
# {{{ emerge
elif [ "$PKMGR" = "emerge" ]; then
  pkm-remove-orphans() { sudo emerge --depclean ;}
  pkm-cleanall() { sudo eclean distfiles ;}
  pkm-info() { emerge -S "$@" ;}
  pkm-install() { sudo emerge "$@" ;}
  pkm-pkgsearch() { equery belongs "$@" ;}
  pkm-refresh() { sudo layman -f ;}
  pkm-remove() { sudo emerge -C "$@" ;}
  pkm-search() { emerge -S "$@" ;}
  pkm-upgrade() { sudo emerge -u world ;}
# }}}
# {{{ pacaur
elif [ "$PKMGR" = "pacaur" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { pacaur -Sc ;}
  pkm-cleanold() { pacaur -Scc ;}
  if type -p downgrade > /dev/null; then
    # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    pacaur -Qi $arg 2> /dev/null \
    || pacaur -Si $arg; done ;}
  pkm-install() { pacaur --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacaur -Qql "$@" ;}
  pkm-listinstalled() { pacaur -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { pacaur -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacaur -Qs "$@" ;}
  pkm-refresh() { pacaur -Syy ;}
  pkm-remove() { pacaur -Rcs "$@" ;}
  pkm-remove-nodepends() { pacaur -Rdd "$@" ;}
  pkm-remove-orphans() { pacaur -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacaur -Qs "$@" && pacaur -s "$@" ;}
  pkm-search-local() { pacaur -Qs "$@" ;}
  pkm-upgrade() { pacaur -Syu ;}	# upgrade everything except aur package
  pkm-upgrade-aur() { pacaur --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ pacman
elif [ "$PKMGR" = "pacman" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { sudo pacman -Sc ;}
  pkm-cleanold() { sudo pacman -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;}
  pkm-info() { for arg in "$@"; do
    pacman -Qi $arg 2> /dev/null \
    || pacman -Si $arg; done ;}
  pkm-install() { sudo pacman -S "$@" ;}
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacman -Qql "$@" ;}
  pkm-listinstalled() { pacman -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { sudo pacman -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacman -Qs "$@" ;}
  pkm-refresh() { sudo pacman -Syy ;}
  pkm-remove() { sudo pacman -Rcs "$@" ;}
  pkm-remove-nodepends() { sudo pacman -Rdd "$@" ;}
  pkm-remove-orphans() { sudo pacman -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacman -Ss "$@" ;}
  pkm-search-local() { pacman -Qs "$@" ;}
  pkm-upgrade() { sudo pacman -Syu ;}
# }}}
# {{{ rug
elif [ "$PKMGR" = "rug" ]; then
  pkm-install() { sudo rug install "$@" ;}
  pkm-refresh() { sudo rug refresh ;}
  pkm-remove() { sudo rug remove "$@" ;}
  pkm-search() { rug search "$@" ;}
  pkm-upgrade() { sudo rug update ;}
# }}}
# {{{ yaourt
elif [ "$PKMGR" = "yaourt" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { yaourt -Sc ;}
  pkm-cleanold() { yaourt -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    yaourt -Qi $arg 2> /dev/null \
    || yaourt -Si $arg; done ;}
  pkm-install() { yaourt --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { yaourt -Qql "$@" ;}
  pkm-listinstalled() { yaourt -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { yaourt -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { yaourt -Qs "$@" ;}
  pkm-refresh() { yaourt -Syy ;}
  pkm-remove() { yaourt -Rcs "$@" ;}
  pkm-remove-nodepends() { yaourt -Rdd "$@" ;}
  pkm-remove-orphans() { yaourt -Rs $(pacman -Qqtd) ;}
  pkm-search() { yaourt --noconfirm "$@" ;}
  pkm-search-local() { yaourt -Qs "$@" ;}
  pkm-upgrade() { yaourt -Syu ;}	# upgrade everything except aur package
  pkm-upgrade-aur() { yaourt --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ yum
elif [ "$PKMGR" = "yum" ]; then
  pkm-cleanall() { sudo yum clean ;}
  pkm-depends() { sudo yum deplist "$@" ;}
  pkm-dependsreverse() { sudo yum resolvedep "$@" ;}
  pkm-info() { for arg in "$@"; do
    rpm -qi $arg 2> /dev/null || yum info $arg; done ;}
  pkm-install() { sudo yum install "$@" ;}
  pkm-list() { for arg in "$@"; do
    rpm -ql $arg 2> /dev/null || repoquery -ql --plugins $arg; done ;}
  pkm-localinstall() { sudo yum localinstall "$@" ;}
  pkm-own() { rpm -qf $(which "$@") ;}
  pkm-pkgsearch() { yum whatprovides "$@" ;}
  pkm-query() { rpm -q "$@" ;}
  pkm-refresh() { sudo yum clean expire-cache && sudo yum check-update ;}
  pkm-remove() { sudo yum remove "$@" ;}
  pkm-remove-orphans() { sudo package-cleanup --leaves ;}
  pkm-search() { yum search "$@" ;}
  pkm-upgrade() { sudo yum update ;}
# }}}
# {{{ zypper
elif [ "$PKMGR" = "zypper" ]; then
  pkm-cleanall() { sudo zypper clean ;}
  pkm-install() { sudo zypper install "$@" ;}
  pkm-pkgsearch() { zypper what-provides "$@" ;}
  pkm-refresh() { sudo zypper refresh ;}
  pkm-remove() { sudo zypper remove "$@" ;}
  pkm-search() { zypper search "$@" ;}
  pkm-upgrade() { sudo zypper update ;}
fi
# }}}

#}}}
#-------- Garbage - Manage Trash-can {{{
#------------------------------------------------------
# DESC: manage trash-can from the commandline
# REFF: https://askubuntu.com/questions/499523/what-is-the-difference-between-gvfs-commands-and-common-commands-like-cat-ls-c
#       https://askubuntu.com/questions/213533/command-to-move-a-file-to-trash-via-terminal

# empty trash-can
empty() {
  if which gio &>/dev/null; then
    gio trash --empty
  elif which gvfs-trash &>/dev/null; then
    gvfs-trash --empty
  else
    echo "Requires glib2 (gio) or gvfs (gvfs-trash) package"
  fi
}

garbage-empty() {
  if which gio &>/dev/null; then
    gio trash --empty
  elif which gvfs-trash &>/dev/null; then
    gvfs-trash --empty
  else
    echo "Requires glib2 (gio) or gvfs (gvfs-trash) package"
  fi
}

# put file in trash-can
garbage() {
  if which gio &>/dev/null; then
    gio trash -f $@
  elif which gvfs-trash &>/dev/null; then
    gvfs-trash -f $@
  else
    echo "Requires glib2 (gio) or gvfs (gvfs-trash) package"
  fi
}

garbage-list() {
  if which gio &>/dev/null; then
    gio list -h trash://
  elif which gvfs-ls &>/dev/null; then
    gvfs-ls -h trash://
  else
    echo "Requires glib2 (gio) or gvfs (gvfs-trash) package"
  fi
}

garbage-restore() {
  if which trash-restore &>/dev/null; then
    trash-restore
  else
    echo "Requires trash-cli package"
  fi
}

# }}}

####################
##### GAMING #######
####################


####################
##### GRAPHICS #####
####################

#-------- Image Resizer & Rotate {{{
#------------------------------------------------------
# Resizing Pictures to different resolutions

image-resizer() {
  if [ $# -lt 2 ]; then
    echo -e "resize pictures to another resolution"
    echo -e "\nUsage:   $0 <size:32x32|96x96|128x128|640x480|800x600|1024x768|1280x720|1280x960|1920x1080> <image>"
    echo -e "\nExample: $0 800x600 pic1.png pic2.png pic3.png"
    echo -e "           $0 640x480 *.jpg"
    return 1
  fi
  IMAGE_SIZE="$1"
  myArray=( "$@" )
  for arg in "${myArray[@]:1}"; do
    convert "$arg" -resize "$IMAGE_SIZE" "${arg%.*}"_"$IMAGE_SIZE"_resized."${arg##*.}"
  done
}

image-rotate() {
  if [ $# -lt 2 ]; then
    echo -e "rotate pictures"
    echo -e "\nUsage:   $0 <90|180|270> <image>"
    echo -e "\nExample: $0 90 pic1.png pic2.png pic3.png"
    echo -e "           $0 180 *.jpg"
    return 1
  fi
  IMAGE_DEGREE="$1"
  myArray=( "$@" )
  for arg in "${myArray[@]:1}"; do
    convert "$arg" -rotate "$IMAGE_DEGREE" "${arg%.*}"_"$IMAGE_DEGREE"_rotated."${arg##*.}"
  done
}

# }}}

####################
##### INTERNET #####
####################

#-------- Youtube-dl (Stream|Download|RipAudio) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=MFxlwVhwayg
# DESC: download/stream media from many online sites
youtube-dl-stream() { youtube-dl -o - "$1" | $PLAYER - ;}

# DESC: convert youtube to audio (youtube.com only)
# -f 171 = webm audio (vorbis)
# -f 140 = m4a (aac)
yt2ogg() { youtube-dl -c --restrict-filenames -x --audio-format vorbis -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2wav() { youtube-dl -c --restrict-filenames -x --audio-format wav -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2mp3() { youtube-dl -c --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2webmaudio() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2m4a() { youtube-dl -c --restrict-filenames -o "%(title)s.%(ext)s" -f 140 "$@" ;}

# }}}
#-------- RipMe CLI (Bulk Image Downloader) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=gX9-tYGB-mY
# DESC: image album downloader for wallpaper, comic, hentai, manga
# LINK: https://github.com/4pr0n/ripme
# REFF: https://github.com/4pr0n/ripme/wiki/How-To-Run-RipMe
# REFF: https://github.com/4pr0n/ripme/issues/8 (Supported Sites)


PATH_RIPME=~/.bin/ripme/ripme.jar
ripme-help() { java -jar $PATH_RIPME -h ;}
ripme-supported() { w3m -dump https://github.com/4pr0n/ripme/issues/8 | less ;}
ripme-cli() { java -jar $PATH_RIPME -l ~/Downloads -u "$@" ;}
ripme-cbz() {
  java -jar $PATH_RIPME -l ~/Downloads -u "$@"
  zip -r "${$(ls -1dt ~/Downloads/*/ | head -1)%/}.cbz" "$(ls -1dt ~/Downloads/*/ | head -1)"
  gvfs-trash -f "$(ls -1dt ~/Downloads/*/ | head -1)"
}
ripme-tsp() {
  tsp java -jar $PATH_RIPME -l ~/Downloads -u "$@"
  sleep 2
  tsp zip -r "${$(ls -1dt ~/Downloads/*/ | head -1)%/}.cbz" "$(ls -1dt ~/Downloads/*/ | head -1)"
  tsp gvfs-trash -f "$(ls -1dt ~/Downloads/*/ | head -1)"
}

# }}}
#-------- Quvi (Download/Stream Media CLI) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jLw64k8CoMc
# LINK: http://quvi.sourceforge.net/
# DESC: media downloader and streamer using external player

quvi-dl() { quvi get "$1" ;}
quvi-stream() { quvi dump "$1" -b quiet --exec "$PLAYER %u" ;}

# }}}
#-------- Wget (Retrieve Files From The Web) {{{
#------------------------------------------------------
# http://stackoverflow.com/a/18709707
wget-extension() {
  if [ $# -lt 2 ]; then
    echo -e "Download all files with specific extension on a webpage"
    echo -e "\nUsage: $0 <file_extension> <url>"
    echo -e "\nExample:\n$0 mp4 http://example.com/files/"
    echo -e "$0 mp3,ogg,wma http://samples.com/files/"
    echo -e "\nGoogle: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna"
    return 1
  fi

  # savepath=~/Downloads
  # outputdir_name=$(echo "$2" | rev | cut -d\/ -f2 | rev)
  # mkdir -pv "$savepath/$outputdir_name"
  # cd "$savepath/$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"

  outputdir_name=$(echo "$2" | rev | cut -d\/ -f2 | rev)
  mkdir -pv "$outputdir_name"
  cd "$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"
}

# }}}
#-------- Peerflix v2 (Popcorntime CLI) [last updated July 27, 2016] {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=NG13yOTPgfY
# LINK: https://github.com/saironiq/shellscripts
# DESC: popcorntime from terminal

peerflix-viewer() {
  # choose a player
  # PFLIX_VIDPLAYER=cvlc
  # PFLIX_VIDPLAYER=mplayer
  PFLIX_VIDPLAYER=mpv

  # ip address and port for video player to connect to
  PFLIX_IPADDR=localhost
  PFLIX_PORT=55055

  echo "${Yellow}>>>Check if peerflix stream is alive at $PFLIX_IPADDR:$PFLIX_PORT [hit Ctrl+C on this screen to exit properly] ${Color_Off}"
    until nc -vzw 2 "$PFLIX_IPADDR" "$PFLIX_PORT"; do sleep 2; done
  echo "${Green}>>>Connecting to peerflix stream ${Color_Off}"
    ($PFLIX_VIDPLAYER http://"$PFLIX_IPADDR":"$PFLIX_PORT")
  echo "${On_IRed}>>>Video Player has exited properly. Killing peerflix stream now ${Color_Off}"
    wait
    killall peerflix
}

# }}}
#-------- Skeet Skeet CLI {{{
#------------------------------------------------------
# requirements:
#     1. install nohup mpv vim youtube-dl
#     2. add this to your ~/.vimrc
#        map <F8> :exec '!nohup mpv ' . shellescape(getline('.'), 1) . ' >/dev/null 2>&1&'<CR><CR>
#
# how to use:
#     1. fap-xvideos ashlynn brooke
#     2. hit F8 on the link you want to play
#     3. hit ZZ or ZQ to quit vim


fap-youporn() {
  grepmatch=$(echo "$@" | sed 's/ /.*/g')
  keyword="$(echo "http://www.youporn.com/search?query=$@&type=straight" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/watch/ {print $2}' | cut -d\/ -f1-6 | grep -iE $grepmatch | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-youjizz() {
  keyword="$(echo "http://www.youjizz.com/search/$@" | sed 's/ /\-/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num".html""; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-pornotube() {
  keyword="$(echo "http://www.pornotube.com/search.php?q=$@" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do curl -s "$line" \
  | awk '/pornotube.com\/m/ && !/class/' | cut -d\" -f 2 | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-xvideos() {
  keyword="$(echo "http://www.xvideos.com/?k=$@" | sed 's/ /\+/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&p=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/xvideos\.com\/video/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
}

fap-jizzhut() {
  keyword="$(echo "http://www.jizzhut.com/search/$@" | sed 's/ /\-/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num.html"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/jizzhut\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | awk '!x[$0]++' | vim -R -
}

fap-redtube() {
  keyword="$(echo "http://www.redtube.com/?search=$@" | sed 's/ /\+/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -source "$line" \
  | awk -F\" '/class="s"/ {print $4, "http://redtube.com"$2}' | awk '!x[$0]++' ; done)

  echo $videourl | awk '!x[$0]++' | vim -R -
}

fap-spankwire() {
  keyword="$(echo "http://www.spankwire.com/search/straight/keyword/$@" | sed 's/ /\%20/g')"
  pagenum=5
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword?Sort=Relevance&Page=$num"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/www\.spankwire\.com/ && /video/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}

# quvi not supported anymore
fap-tnaflix() {
  keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
  	"http://www.tnaflix.com/search.php?page=$num$keyword"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/video[0-9]/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}
fap-empflix() {
  keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
  pagenum=3
  pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
  	"http://www.empflix.com/search.php?page=$num$keyword"; done )
  videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
  | awk '/empflix\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)

  echo $videourl | sed 's/\ /\n/g' | vim -R -
}

#}}}
#-------- MPSYT-Youtube Channels {{{
#------------------------------------------------------
# tutorial video: https://www.youtube.com/watch?v=VE2iCBkIs8E
mpsyt-top100songs() { mpsyt pl PLx0sYbCqOb8TBPRdmBHs5Iftvv9TPboYG ;}
syt-linux-linuxgamecast() { mpsyt user linuxgamecast ;}
mpsyt-linux-jupiterbroadcasting() { mpsyt user jupiterbroadcasting ;}

# }}}
#-------- Youtube-Viewer Channels {{{
#------------------------------------------------------
# tutorial video: http://www.youtube.com/watch?v=FnJ67oAxVQ4
# watch/login/comment/search/download...etc video on youtube, all from cli
# https://github.com/trizen/youtube-viewer
yt-listen() { youtube-viewer -n $@ ;}	# no video, music/audio only
yt-music() { youtube-viewer -n --category=Music --top ;}	# show top music list
yts-linuxgamecast() { youtube-viewer -u linuxgamecast ;}
yts-jupiterbroadcasting() { youtube-viewer -u jupiterbroadcasting ;}
## }}}
#-------- NVLC Podcast RSS {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=7y_58wpHuFE
# DESC: play local and internet media using ncurses VLC

nvlc-player() { nvlc ${1:-cdda://} ;}		# other cdrom; cdda:///dev/cdrom ; cdda:///dev/sr0 ; cdda:///dev/sr1
nvlc-podcast() { nvlc -S podcast --podcast-urls "$@" ;}
podcast-linux-thirdworldlinux() { nvlc-podcast "http://feeds.feedburner.com/thirdworldlinuxogg" ;}
podcast-linux-linuxactionshow() { nvlc-podcast "http://feeds.feedburner.com/TheLinuxActionShowOGG" ;}
podcast-linux-linuxunplugged() { nvlc-podcast "http://feeds.feedburner.com/linuxunogg" ;}
podcast-linux-techtalktoday() { nvlc-podcast "http://feedpress.me/t3ogg" ;}
podcast-linux-everydaylinux() { nvlc-podcast "http://elementopie.com/feeds/everydaylinux/feed.xml" ;}
podcast-linux-goinglinux() { nvlc-podcast "http://goinglinux.com/oggpodcast.xml" ;}
podcast-linux-hackerpublicradio() { nvlc-podcast "http://hackerpublicradio.org/hpr_total_ogg_rss.php" ;}
podcast-science-nprradiolab() { nvlc-podcast "http://feeds.wnyc.org/radiolab" ;}
podcast-science-startalk() { nvlc-podcast "http://feeds.soundcloud.com/users/soundcloud:users:38128127/sounds.rss" ;}
podcast-science-thisweekinscience() { nvlc-podcast "http://feeds.feedburner.com/twis/science/" ;}

#}}}
#-------- Simple HTTP Server v4 {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=FFIjMYzkHhc
# DESC: python http server, host files and folders

simplehttpserver() {
  # get local router ip
  MY_IP=$(ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1 | cut -d' ' -f2)

  # default port is 8000 if no arg port is given
  MY_PORT="${1:-8000}"

  # check if python is installed
  if which python2 &>/dev/null; then
    echo "${Green}>>>Server will be hosted at http://$MY_IP:$MY_PORT ${Color_Off}"
    python2 -m SimpleHTTPServer "$MY_PORT"
  elif which python3 &>/dev/null; then
    echo "${Green}>>>Server will be hosted at http://$MY_IP:$MY_PORT ${Color_Off}"
    python3 -m http.server "$MY_PORT"
  else
    echo "${Red}>>>Requires python2 or python3 for server features ${Color_Off}"
  fi
}
#}}}
#-------- Transmission CLI v2 {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ee4XzWuapsE
# DESC: lightweight torrent client; interface from cli, webui, ncurses, and gui
# WEBUI:  http://localhost:9091/transmission/web/
# 	  http://192.168.1.xxx:9091/transmission/web/

tsm-clearcompleted() {
  transmission-remote -l | grep 100% | grep Done | \
  awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r
}

# display numbers of ip being blocked by the blocklist (credit: smw from irc #transmission)
tsm-count() {
  echo "Blocklist rules:" $(curl -s --data \
  '{"method": "session-get"}' localhost:9091/transmission/rpc -H \
  "$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
  | cut -d: -f 11 | cut -d, -f1)
}

# DEMO: http://www.youtube.com/watch?v=TyDX50_dC0M
# DESC: merge multiple ip blocklist into one
# LINK: https://github.com/gotbletu/shownotes/blob/master/blocklist.sh
tsm-blocklist() {
  echo "${Red}>>>Stopping Transmission Daemon ${Color_Off}"
    killall transmission-daemon
  echo "${Yellow}>>>Updating Blocklist ${Color_Off}"
    ~/.scripts/blocklist.sh
  echo "${Red}>>>Restarting Transmission Daemon ${Color_Off}"
    transmission-daemon
    sleep 3
  echo "${Green}>>>Numbers of IP Now Blocked ${Color_Off}"
    echo $(tsm-count)
}
tsm-altdownloadspeed() { transmission-remote --downlimit "${@:-900}" ;}	# download default to 900K, else enter your own
tsm-altdownloadspeedunlimited() { transmission-remote --no-downlimit ;}
tsm-limitupload() { transmission-remote --uplimit "${@:-10}" ;}	# upload default to 10kpbs, else enter your own
tsm-limituploadunlimited() { transmission-remote --no-uplimit ;}
tsm-askmorepeers() { transmission-remote -t"$1" --reannounce ;}
tsm-daemon() { transmission-daemon ;}
tsm-quit() { killall transmission-da ;}
tsm-add() { transmission-remote --add "$1" ;}
tsm-hash() { transmission-remote --add "magnet:?xt=urn:btih:$1" ;}       # adding via hash info
tsm-verify() { transmission-remote --verify "$1" ;}
tsm-pause() { transmission-remote -t"$1" --stop ;}		# <id> or all
tsm-start() { transmission-remote -t"$1" --start ;}		# <id> or all
tsm-purge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
tsm-remove() { transmission-remote -t"$1" --remove ;}		# leaves data alone
tsm-info() { transmission-remote -t"$1" --info ;}
tsm-speed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}
tsm-grep() { transmission-remote --list | grep -i "$1" ;}
tsm() { transmission-remote --list ;}
tsm-show() { transmission-show "$1" ;}                          # show .torrent file information

# DEMO: http://www.youtube.com/watch?v=hLz7ditUwY8
# LINK: https://github.com/fagga/transmission-remote-cli
# DESC: ncurses frontend to transmission-daemon
tsm-ncurse() { transmission-remote-cli ;}

#}}}
#-------- Flexget (Torrent RSS) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/playlist?list=PLqv94xWU9zZ0pVGrgKtMuhFHun8-MahSY
# LINK: http://flexget.com/
# DESC: auto download torrent similar to how a DVR works

alias flexget='~/.virtualenv/flexget/bin/flexget'
flexget-list() { flexget series list && flexget movie-list list ;}
flexget-check() { flexget check ;}			# check if config file has any errors
flexget-test() { flexget --test execute ;}		# dry run
flexget-execute() { flexget execute ;}                  # download new torrent
flexget-cron() { flexget --cron execute ;}		# skip writing to logs
flexget-version() { flexget -V ;}
flexget-learnall() { flexget execute --learn ;}		# bypass dling old torrents
flexget-moviequeue-add() { flexget movie-list add "$@" ;}
flexget-moviequeue-del() { flexget movie-list del "$@" ;}
flexget-moviequeue-purge() { flexget movie-list purge ;}  # clear all queue
flexget-forget() { flexget movie-list forget "$@" ;}	# allow redownloading on waiting list

#}}}

####################
##### MISC #########
####################

#-------- Fasd (Jump and Open Files Quickly) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ur81Y-mV5Us
# LINK: https://github.com/clvv/fasd
# DESC: jump to path or open recent files quickly from cli

if which fasd >/dev/null; then
  eval "$(fasd --init auto)"	# get fasd working, initialization code

  # different fasd listing
  # alias a='fasd -a'               # any
  # alias s='fasd -si'              # show / search / select
  # alias d='fasd -d'               # directory
  # alias f='fasd -f'               # file
  # alias sd='fasd -sid'            # interactive directory selection
  # alias sf='fasd -sif'            # interactive file selection
  # alias z='fasd_cd -d'            # cd, same functionality as j in autojump
  # alias zz='fasd_cd -d -i'        # cd with interactive selection

  # open with external programs
  alias m="f -e $PLAYER"		# open with video player
  alias o="a -e $OPENER"		# open any file
  alias v="f -e $EDITOR"		# open with text editor
fi
#}}}

####################
#### MULTIMEDIA ####
####################

#-------- FFMPEG X11GRAB Screencasting {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture single mic source)
# REFF: http://ubuntuforums.org/showthread.php?t=1392026
#       https://github.com/gotbletu/wikimd/blob/master/ffmpeg-compile.md
#       https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
#       https://trac.ffmpeg.org/wiki/Capture/ALSA
#       https://trac.ffmpeg.org/wiki/Capture/Desktop
#       http://nowardev.wordpress.com/2011/05/23/how-to-screencast/

# ffmpeg location
FF_RECORDER=/usr/bin/ffmpeg
# FF_RECORDER=~/Compile/ffmpeg/bin/ffmpeg

# Method 1: Record Speakers only
# 1) set to FFMIC=pulse
# 2) alsamixer set capture volume to highest (e.g https://i.imgur.com/HrNf79J.png)
# 3) run this ffcast command
# 3) open pavucontrol > recording > Monitor of Built-in Audio Analog Stereo (e.g https://i.imgur.com/SwXJh1W.png)
# pavucontrol if using pulseaudio
# FF_MIC=pulse
# FF_MIC_CH="2"

# Method 2: Record Microphone only
# use "arecord -L" to find name (this is the better option since your device can change numbers on reboot)
# use "arecord -l" to find mic number
# FF_MIC=hw:4,0
FF_MIC=front:CARD=Snowball
FF_MIC_CH="1"

# scale down resolution if needed
# ${FF_SCALE[*]}
# FF_SCALE=(-vf scale=1280:720)

# movie = video and audio
# videotrack = video only
# audiotrack = audio only
FF_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FF_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FF_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

ffcast-fullscreen-movie() {
  $FF_RECORDER -thread_queue_size 512 -f alsa -ac $FF_MIC_CH -i $FF_MIC -async 1 -f x11grab -r 30 \
  -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) \
  -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
  -acodec libmp3lame -ab 320k -threads 0 -y $FF_OUTPUT_MOVIE
}

ffcast-fullscreen-videotrack() {
  $FF_RECORDER -f x11grab -r 30 \
  -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) \
  -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
  -threads 0 -y $FF_OUTPUT_VIDEO
}

ffcast-audiotrack() {
  $FF_RECORDER -f alsa -ac $FF_MIC_CH -i $FF_MIC \
  -acodec libmp3lame -ab 320k \
  -threads 0 -y $FF_OUTPUT_AUDIO
}

# single window: select a window with mouse cursor to record
ffcast-window-movie() {
  INFO=$(xwininfo -frame)
  WIN_GEO=$(echo $INFO | grep -oEe 'geometry [0-9]+x[0-9]+' | grep -oEe '[0-9]+x[0-9]+')
  WIN_XY=$(echo $INFO | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )

  $FF_RECORDER -thread_queue_size 512 -f alsa -ac $FF_MIC_CH -i $FF_MIC -async 1 -f x11grab -r 30 \
  -s $WIN_GEO -i :0.0+$WIN_XY -vcodec libx264 -pix_fmt yuv444p \
  -preset ultrafast -crf 0 -acodec libmp3lame -ab 320k \
  -threads 0 -y $FF_OUTPUT_MOVIE
}

ffcast-window-videotrack() {
  INFO=$(xwininfo -frame)
  WIN_GEO=$(echo $INFO | grep -oEe 'geometry [0-9]+x[0-9]+' | grep -oEe '[0-9]+x[0-9]+')
  WIN_XY=$(echo $INFO | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )

  $FF_RECORDER -f x11grab -r 30 \
  -s $WIN_GEO -i :0.0+$WIN_XY -vcodec libx264 -pix_fmt yuv444p \
  -preset ultrafast -crf 0 \
  -threads 0 -y $FF_OUTPUT_VIDEO
}


# example references
# worked well on ffmpeg 0.11.1
# ffmpeg -f pulse -ac 1 -i hw:3,0 -async 1 -f x11grab -r 30 -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 -acodec libmp3lame -ab 128k -threads 0 -y ~/Public/screencast/aa_screencast_baking.mkv

# }}}
#-------- PulseAudio Switcher CLI {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210

# list all audio sources
pa-sources() {
  echo -e "list all input and output sound devices (output = speakers, input = microphone)\n"
  pacmd list-sources | awk '/index:/ ||/name:/ || /alsa.card_name/ || /device.description/' | grep -E --color 'output|$'
}

pa-global() {
  if [ $# -lt 1 ]; then
    echo -e "pulseaudio redirect audio of all running app to another device"
    echo -e "\nUsage:\n$0 <device_index_number>"
    echo -e "\nExample:\n$0 0 \n"
    echo "==============="
    echo "Sound Devices"
    pacmd list-sinks | awk '/index/ || /name:/ || /alsa.card_name/ || /device.description/'
    return 1
  fi
  # list all apps in playback tab (ex: cmus, mplayer, vlc)
  inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}'))
  # set the default output device
  pacmd set-default-sink $1 &> /dev/null
  # apply the changes to all running apps to use the new output device
  for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done
}

pa-solo() {
  if [ $# -lt 2 ]; then
    echo -e "pulseaudio redirect audio of one running app to another device"
    echo -e "\nUsage:\n$0 <app_index_number> <device_index_number>"
    echo -e "\nExample:\n$0 2302 0 \n"
    echo "==============="
    echo "Running Apps"
    pacmd list-sink-inputs | awk '/index/ || /application.name /'
    echo "==============="
    echo "Sound Devices"
    pacmd list-sinks | awk '/index/ || /name:/ || /alsa.card_name/ || /device.description/'
    return 1
  fi
  # set the default output device
  pacmd set-default-sink "$2" &> /dev/null
  # apply changes to one running app to use the new output device
  pacmd move-sink-input "$1" "$2" &> /dev/null
}

#}}}
#-------- Convert to Audio {{{
#------------------------------------------------------
# REFF: https://trac.ffmpeg.org/wiki/Encode/MP3
#       https://trac.ffmpeg.org/wiki/Encode/AAC
#       https://trac.ffmpeg.org/wiki/TheoraVorbisEncodingGuide

convert-to-audio-mp3() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.m4a"
    echo -e "$0 file1.m4a file2.m4a file3.m4a"
    echo -e "$0 *.m4a"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp3 ]
    do
      ffmpeg -i "$arg" -codec:a libmp3lame -qscale:a 2 "${arg%.*}".mp3
    done
  done
}

convert-to-audio-m4a() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".m4a ]
    do
      ffmpeg -i "$arg" -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".m4a
    done
  done
}

convert-to-audio-ogg() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ogg ]
    do
      ffmpeg -i "$arg" -codec:a libvorbis -qscale:a 5 -vn "${arg%.*}".ogg
    done
  done
}

convert-to-audio-wav() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".wav ]
    do
      ffmpeg -i "$arg" "${arg%.*}".wav
    done
  done
}

convert-to-audio-webm() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".webm ]
    do
      ffmpeg -i "$arg" -codec:a libvorbis -qscale:a 5 -vn "${arg%.*}".webm
    done
  done
}

convert-to-audio-wavmono() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}"-monoaudiotrack.wav ]
    do
      ffmpeg -i "$arg" -codec:a pcm_mulaw -ar 8000 -ac 1 "${arg%.*}"-monoaudiotrack.wav
    done
  done
}

convert-to-audio-wma() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp3"
    echo -e "$0 file1.mp3 file2.mp3 file3.mp3"
    echo -e "$0 *.mp3"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".wma ]
    do
      ffmpeg -i "$arg" -codec:a wmav2 -b:a 128k "${arg%.*}".wma
    done
  done
}

# }}}
#-------- Convert to Video {{{
#------------------------------------------------------
# REFF: http://linuxconfig.org/ffmpeg-audio-format-conversions
#       https://trac.ffmpeg.org/wiki/Encode/H.265
#       http://unix.stackexchange.com/questions/230800/re-encoding-video-library-in-x265-hevc-with-no-quality-loss

convert-to-video-x265() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*} x265.mkv" ]
    do
      # very clear (same as OG)
      # ffmpeg -i "$arg" -c:v libx265 -preset medium -crf 23 -x265-params lossless -c:a copy -c:s copy "${arg%.*} x265 crf23.mkv"
      # smaller file size, semi clear to OG
      ffmpeg -i "$arg" -c:v libx265 -preset medium -crf 28 -x265-params lossless -c:a copy -c:s copy "${arg%.*} x265.mkv"
    done
  done
}

convert-to-video-mp4-h265() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp4 ]
    do
      ffmpeg -i "$arg" -codec:v libx265 -preset medium -crf 28 -codec:a aac -qscale:a 6 "${arg%.*}".mp4
    done
  done
}

convert-to-video-mp4() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mp4 ]
    do
      ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${arg%.*}".mp4
    done
  done
}

convert-to-video-avi() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".avi ]
    do
      ffmpeg -i "$arg" -codec:v mpeg4 -vtag xvid -qscale:v 3 -codec:a libmp3lame -qscale:a 4 "${arg%.*}".avi
    done
  done
}
convert-to-video-ogv() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ogv ]
    do
      ffmpeg -i "$arg" -codec:v libtheora -qscale:v 7 -codec:a libvorbis -qscale:a 5 "${arg%.*}".ogv
    done
  done
}
convert-to-video-mpg() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mpg ]
    do
      ffmpeg -i "$arg" -codec:v mpeg2video -qscale:v 2 -codec:a mp2 -b:a 192k "${arg%.*}".mpg
    done
  done
}
convert-to-video-mkv() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".mkv ]
    do
      ffmpeg -i "$arg" -codec:v libx264 -preset medium -crf 22 -codec:a libvorbis -qscale:a 5 "${arg%.*}".mkv
    done
  done
}
convert-to-video-webm() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".webm ]
    do
      ffmpeg -i "$arg" -codec:v libvpx -crf 10 -b:v 1M -codec:a libvorbis "${arg%.*}".webm
    done
  done
}

# }}}

####################
##### OFFICE #######
####################


####################
##### STORAGE ######
####################

#-------- Format USB v4 [last updated October 23, 2016]  {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=7txO1cdNJsQ
# DESC: format USB and create a single partition

format2usb-ext() {
  if [ $# -lt 3 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <filesystem:ext2|ext3|ext4> <device_label> <device_name>"
    echo -e "Example: $0 ext2 MY_USB sdx"
    echo -e "         $0 ext3 MY_USB sdx"
    echo -e "         $0 ext4 MY_USB sdx"
    return 1
  fi
  FSTYPE="$1"
  DEVICE_LABEL="$2"
  DEVICE_NAME="$3"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
  echo -n "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "${Green}>>>You chose to continue ${Color_Off}"
    else
      return 1
    fi
  echo "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
    echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$DEVICE_NAME"
    # delete partiton x8 using d\n\n
    # d    delete a partition
    #      default, partition
    # o    create a new empty DOS partition table
    # n    add a new partition
    # p    print the partition table
    # 1    partition number 1
    #      default, start immediately after preceding partition
    #      default, extend partition to end of disk
    # w    write table to disk and exit
  echo "${Red}>>>Formatting the device ${Color_Off}"
    echo -e "y\n" | sudo mkfs."$FSTYPE" -L "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
  echo "${Yellow}>>>Changing permission of the filesystem ${Color_Off}"
    mkdir -p -v /tmp/testmount
    sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
    sudo chmod -R 777 /tmp/testmount
  echo "${Green}>>>Change EXT filesystem 5% reserved space to 0% (increase storage space) ${Color_Off}"
    MOUNTED_TESTMOUNT=$(df | awk '/testmount/ {print $1}')
    sudo tune2fs -m 0 "$MOUNTED_TESTMOUNT"
    sudo tune2fs -l "$MOUNTED_TESTMOUNT" | grep --color=auto 'Reserved block count'
  echo "${Red}>>>Unmounting and cleanup ${Color_Off}"
    sudo umount /tmp/testmount
    rmdir -v /tmp/testmount
}

format2usb-gamecube() {
  if [ $# -lt 2 ]; then
    echo -e "format device to work with wii & gamecube games using FAT32 with 32KB cluster"
    echo -e "FAT32 label max is 11 character and is all uppercase"
    echo -e "512 bytes (per sector) * 64 sectors (per cluster) = 32KB clusters (32768 Bytes)"
    echo -e "more info: https://gist.github.com/joshenders/4376942"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi
  # fat32 likes the labels to be in uppercase
  DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
  echo -n "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "${Green}>>>You chose to continue ${Color_Off}"
    else
      return 1
    fi
  echo "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
    echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$DEVICE_NAME"
    # delete partiton x8 using d\n\n
    # d    delete a partition
    #      default, partition
    # o    create a new empty DOS partition table
    # n    add a new partition
    # p    print the partition table
    # 1    partition number 1
    #      default, start immediately after preceding partition
    #      default, extend partition to end of disk
    # t    change a partition type (L to list all types)
    # b    W95 FAT32
    # w    write table to disk and exit
  echo "${Red}>>>Formatting the device ${Color_Off}"
    sudo mkfs.fat -S 512 -s 64 -F 32 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
  echo "${Red}>>>Changing permission of the filesystem ${Color_Off}"
    mkdir -p -v /tmp/testmount
    sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
    sudo chmod -R 777 /tmp/testmount
    sudo umount /tmp/testmount
    rmdir -v /tmp/testmount
}

format2usb-exfat() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "exFAT label max is 15 character and is all uppercase"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi
  # exFat likes the labels to be in uppercase
  DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
  echo -n "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "${Green}>>>You chose to continue ${Color_Off}"
    else
      return 1
    fi
  echo "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
    echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\n7\nw" | sudo fdisk /dev/"$DEVICE_NAME"
    # delete partiton x8 using d\n\n
    # d    delete a partition
    #      default, partition
    # o    create a new empty DOS partition table
    # n    add a new partition
    # p    print the partition table
    # 1    partition number 1
    #      default, start immediately after preceding partition
    #      default, extend partition to end of disk
    # t    change a partition type (L to list all types)
    # 7    HPFS/NTFS/exFAT
    # w    write table to disk and exit
  echo "${Red}>>>Formatting the device ${Color_Off}"
    sudo mkfs.exfat -n "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
  echo "${Red}>>>Changing permission of the filesystem ${Color_Off}"
    mkdir -p -v /tmp/testmount
    sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
    sudo chmod -R 777 /tmp/testmount
    sudo umount /tmp/testmount
    rmdir -v /tmp/testmount
}

format2usb-fat32() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "FAT32 label max is 11 character and is all uppercase"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi
  # fat32 likes the labels to be in uppercase
  DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
  echo -n "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "${Green}>>>You chose to continue ${Color_Off}"
    else
      return 1
    fi
  echo "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
    echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$DEVICE_NAME"
    # delete partiton x8 using d\n\n
    # d    delete a partition
    #      default, partition
    # o    create a new empty DOS partition table
    # n    add a new partition
    # p    print the partition table
    # 1    partition number 1
    #      default, start immediately after preceding partition
    #      default, extend partition to end of disk
    # t    change a partition type (L to list all types)
    # b    W95 FAT32
    # w    write table to disk and exit
  echo "${Red}>>>Formatting the device ${Color_Off}"
    sudo mkfs.fat -F 32 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
  echo "${Red}>>>Changing permission of the filesystem ${Color_Off}"
    mkdir -p -v /tmp/testmount
    sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
    sudo chmod -R 777 /tmp/testmount
    sudo umount /tmp/testmount
    rmdir -v /tmp/testmount
}

format2usb-ntfs() {
  if [ $# -lt 2 ]; then
    echo -e "format and create a partition that fills up the whole device"
    echo -e "\nUsage: $0 <label> <device>"
    echo -e "Example: $0 MY_USB sdx"
    return 1
  fi
  DEVICE_LABEL="$1"
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
  echo -n "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "${Green}>>>You chose to continue ${Color_Off}"
    else
      return 1
    fi
  echo "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
    echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\n7\nw" | sudo fdisk /dev/"$DEVICE_NAME"
    # delete partiton x8 using d\n\n
    # d    delete a partition
    #      default, partition
    # o    create a new empty DOS partition table
    # n    add a new partition
    # p    print the partition table
    # 1    partition number 1
    #      default, start immediately after preceding partition
    #      default, extend partition to end of disk
    # t    change a partition type (L to list all types)
    # 7    HPFS/NTFS/exFAT
    # w    write table to disk and exit
  echo "${Red}>>>Formatting the device ${Color_Off}"
    sudo mkfs.ntfs -f -L "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
  echo "${Red}>>>Changing permission of the filesystem ${Color_Off}"
    mkdir -p -v /tmp/testmount
    sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
    sudo chmod -R 777 /tmp/testmount
    sudo umount /tmp/testmount
    rmdir -v /tmp/testmount
}

# }}}
#-------- Mount Disc Images (ISO|NRG|BIN|MDF|IMG) {{{
#------------------------------------------------------

mount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
    echo -e "$0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fuseiso -n -p "$arg" "/tmp/$arg"
  done

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <mount_point|disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin"
    echo -e "$0 mount_point1 mount_point2"
    echo -e "cd /tmp && $0 mount_point"
    echo -e "cd /tmp && $0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fusermount -u "$arg"
  done
}

mount-img() {
  if [ $# -lt 1 ]; then
    echo -e "mount image to access files"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  mkdir -p "/tmp/$1"
  sudo mount "$PWD/$1" "/tmp/$1"

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-img() {
  if [ $# -lt 1 ]; then
    echo -e "unmount image"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  sudo umount "/tmp/$1"
  rmdir "/tmp/$1"
}

# }}}
#-------- Mount Archive (ISO|ZIP|RAR|TAR) {{{
#------------------------------------------------------
# http://ubuntuforums.org/showthread.php?t=1207096
mount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "mount archive files (iso|zip|rar|tar...etc)"
    echo -e "\nUsage:\n$0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 *.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount "archive://$( ( echo -n 'file://' ; readlink -f $arg ; ) | perl -MURI::Escape -lne 'print uri_escape($_)')"
  done

  # if mount was sucessful then cd into gvfs dir and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/run/user/$(id -u)/gvfs" && ls
  else
    return 1
  fi
}

unmount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount archive files (iso|zip|rar|tar)"
    echo -e "\nUsage:\n$0 <mount_point>"
    echo -e "\nExample:\n$0 archive:host=file%253Afoo%bar.zip"
    echo -e "cd /run/user/${UID}/gvfs/ && $0 archive:host=file%253Afoo%bar.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount -u "/run/user/$(id -u)/gvfs/$arg"
  done
}

# }}}
#-------- Smartctl - Check Hard Drive Health (last update March 27, 2017) {{{
#------------------------------------------------------
# S.M.A.R.T. is the abbreviation for "Self Monitoring And Reporting Technology"
# It is a standard interface protocol and set of the disk features that allows disk to check its status and report it to a host system
# references:
# https://www.smartmontools.org/browser/trunk/smartmontools/smartctl.8.in
# https://en.wikipedia.org/wiki/S.M.A.R.T.#ATA_S.M.A.R.T._attributes
# http://www.z-a-recovery.com/manual/smart.aspx
# https://ddumont.wordpress.com/2010/03/15/workaround-for-aborted-smart-test-for-seagate-disk/

smartctl-conveyancetest() {
  if [ $# -lt 1 ]; then
    echo -e "perform conveyance test to check hard drive health (usually 5mins)"
    echo -e "not all drives has this testing feature"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -t conveyance /dev/"$1"
}

smartctl-extendedtest() {
  if [ $# -lt 1 ]; then
    echo -e "perform long extended test to check hard drive health (usually 1hr+)"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -t long /dev/"$1"
}

smartctl-shorttest() {
  if [ $# -lt 1 ]; then
    echo -e "perform short test to check hard drive health (usually 2mins)"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -t short /dev/"$1"
}

smartctl-showprogress() {
  if [ $# -lt 1 ]; then
    echo -e "show the progress of your smartctl self test"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo watch -n 10 "smartctl -l selftest /dev/$1 ; smartctl -c /dev/$1 | head -11 | tail -3"
}

smartctl-cancletest() {
  if [ $# -lt 1 ]; then
    echo -e "cancle a self test (short, conveyance, extended)"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -X /dev/"$1"
}

smartctl-enablesmart() {
  if [ $# -lt 1 ]; then
    echo -e "enable SMART on your hard drive"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -s on /dev/"$1"
}

smartctl-disablesmart() {
  if [ $# -lt 1 ]; then
    echo -e "disable SMART on your hard drive"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -s off /dev/"$1"
}

smartctl-keepalive() {
  if [ $# -lt 1 ]; then
    echo -e "Keep hard drive from going to sleep by creating a file every 60 seconds."
    echo -e 'Some external hard drive like Seagate will auto sleep on idle, thus we will get a "Aborted by host" in our self-test logs'
    echo -e "references: https://ddumont.wordpress.com/2010/03/15/workaround-for-aborted-smart-test-for-seagate-disk/"
    echo -e "\nUsage: $0 <path>"
    echo -e "Example: $0 ."
    echo -e "         cd /mnt/myseagatehdd && $0 ."
    return 1
  fi
  while true ; do echo "foo" >> test.txt; sleep 60; done
}

smartctl-info() {
  if [ $# -lt 1 ]; then
    echo -e 'Show S.M.A.R.T information of a device'
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -a /dev/"$1" | grep -i --color='always' -E 'WARNING|Model Family|Device Model|SMART support is|User Capacity|SMART overall-health self-assessment test result|-fail|Short self-test routine|Extended self-test routine|Conveyance self-test routine|SMART Attributes Data Structure|Power_On_Hours|SMART Self-test log structure|ATA Error Count|FAILING_NOW|$'

  echo "${Red}=============References=================${Color_Off}"
  echo "${Yellow}>>>ATTRIBUTE_NAME meaning: https://en.wikipedia.org/wiki/S.M.A.R.T.#ATA_S.M.A.R.T._attributes ${Color_Off}"
  echo "${Blue}>>>aborted by host (HDD sleep on idle): https://ddumont.wordpress.com/2010/03/15/workaround-for-aborted-smart-test-for-seagate-disk/ ${Color_Off}"
  echo "${Green}>>>Manpage: If the Normalized value (VALUE) is less than or equal to the Threshold value (THRESH), then the Attribute is said to have failed. If the Attribute is a pre-failure Attribute, then disk failure is imminent. ${Color_Off}"
  echo "${Green}>>>Please note: the fact that an Attribute is of type 'Pre-fail' does not mean that your disk is about to fail!${Color_Off}"
  echo "${Green}>>>If the Attribute's current Normalized value is less than or equal to the threshold value, then the "WHEN_FAILED" column will display FAILING_NOW.${Color_Off}"
  echo "${Purple}=====HDD Hours=====${Color_Off}"
  echo "1000  hrs = 41 days"
  echo "8760  hrs = 1 year  (365  days)"
  echo "17520 hrs = 2 years (730  days)"
  echo "26280 hrs = 3 years (1095 days)"
  echo "35040 hrs = 4 years (1460 days)"
  echo "43800 hrs = 5 years (1825 days)"
  echo "52560 hrs = 6 years (2190 days)"
}
# }}}

####################
##### VM / RDP #####
####################

#-------- rDesktop v2 (Remote Desktop) [last updated August 30, 2016] {{{
#------------------------------------------------------
# DESC: connect to remote desktop computers

rdesktop-winxp() {
  ipaddr=192.168.1.150
  port=3389
  username=administrator
  resolution=1920x1020
  echo "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win10() {
  ipaddr=192.168.1.116
  port=3389
  username=bonster
  resolution=1920x1020
  echo "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win7() {
  ipaddr=192.168.1.98
  port=3389
  username=bonster
  resolution=1920x1020
  echo "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-mintmate64() {
  ipaddr=192.168.1.206
  port=3389
  username=bonster
  resolution=1920x1020
  echo "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-fedoramate64() {
  ipaddr=192.168.1.52
  port=3389
  username=bonster
  resolution=1920x1020
  echo "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

# }}}


####################
##### QUEUE ########
####################
# Code that is working good but needs to be used for a while before including it to the next level up

#-------- Clonezilla CLI (Clone and Restore Image) {{{
#------------------------------------------------------
### Full Disk Clone and Restore
clonezilla-disk-cloning() {
  if [ $# -lt 2 ]; then
    echo -e "clone full disk to image"
    echo -e "\nUsage: $0 <output_file> <device>"
    echo -e "\nExample: $0 mydesktop sdx"
    echo -e "\nNote: <output_file> will be saved to your current path"
    return 1
  fi
  OUTPUT_FILE="$1_clonezilla_disk_`date +'%Y_%m_%d'`"
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Blue}>>>Set current output path to $PWD ${Color_Off}"
    sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf
  echo "${Green}>>>Start full disk cloning process ${Color_Off}"
  echo "${Green}>>>$OUTPUT_FILE image will be saved to $PWD ${Color_Off}"
    sudo ocs-sr -q2 -c -j2 -z1p -i 5000000 -sc -p true savedisk "$OUTPUT_FILE" "$DEVICE_NAME"
  echo "${Red}>>>Changing permission of $OUTPUT_FILE image ${Color_Off}"
    sudo chmod -R 777 "$OUTPUT_FILE"
}

clonezilla-disk-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore full disk image to device"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mydesktop_clonezilla_disk_2016_07_02 sdx"
    return 1
  fi
  INPUT_FILE="$1"
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
      return 1
    fi
  echo "${Green}>>>Start full disk restore process ${Color_Off}"
    sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -p true restoredisk "$INPUT_FILE" "$DEVICE_NAME"
}

### Partition Clone and Restore
clonezilla-partition-cloning() {
  if [ $# -lt 2 ]; then
    echo -e "clone device partition to image"
    echo -e "\nUsage: $0 <output_file> <device>"
    echo -e "\nExample: $0 mylaptop sdx2"
    echo -e "\nNote: <output_file> will be saved to your current path"
    return 1
  fi
  OUTPUT_FILE="$1_clonezilla_part${PART_NUM}_`date +'%Y_%m_%d'`"
  DEVICE_NAME="$2"
  PART_NUM=$(echo "$2" | sed 's/[^0-9]*//g')
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount then try again ${Color_Off}"
      return 1
    fi
  echo "${Blue}>>>Set current output path to $PWD ${Color_Off}"
    sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf
  echo "${Green}>>>Start partition cloning process ${Color_Off}"
  echo "${Green}>>>$OUTPUT_FILE image will be saved to $PWD ${Color_Off}"
    sudo /usr/sbin/ocs-sr -q2 -c -j2 -z1p -i 5000000 -sc -p true saveparts "$OUTPUT_FILE" "$DEVICE_NAME"
  echo "${Red}>>>Changing permission of $OUTPUT_FILE image ${Color_Off}"
    sudo chmod -R 777 "$OUTPUT_FILE"
}

clonezilla-partition-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore image to device partition"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mylaptop_clonezilla_partition2_2016_07_02 sdx2"
    echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
    return 1
  fi
  INPUT_FILE="$1"
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount then try again ${Color_Off}"
      return 1
    fi
  echo "${Green}>>>Start partition restore process ${Color_Off}"
    sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k -p true restoreparts "$INPUT_FILE" "$DEVICE_NAME"
}

# http://drbl.org/faq/fine-print.php?path=./2_System/102_restore_image_to_different_partition.faq#102_restore_image_to_different_partition.faq
clonezilla-partition-restore-to-differentpartition() {
  if [ $# -lt 2 ]; then
    echo -e "restore image to device partition"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mylaptop_clonezilla_partition2_2016_07_02 sdx2"
    echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
    return 1
  fi
  INPUT_FILE="$1"
  DEVICE_NAME="$2"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Preparing temp files to change partitions ${Color_Off}"
    # create symlinks to change partition
    cd "$INPUT_FILE"
    TARGET_DIR="/tmp/$INPUT_FILE"
    mkdir -p -v "$TARGET_DIR"
    for arg in *; do
      ln -s "$PWD/$arg" "$TARGET_DIR/$arg"
    done
    # rename partition name in parts file
    rm "$TARGET_DIR/parts"
    echo "$DEVICE_NAME" > "$TARGET_DIR/parts"
    # rename partition filename (example: sdd1.vfat-ptcl-img.gz.aa --> sdd5.vfat-ptcl-img.gz.aa)
    IMG_NAME=$(ls "$TARGET_DIR" | grep .aa$)
    IMG_NAME_CUT=$(ls "$TARGET_DIR" | grep .aa$ | cut -d'.' -f2- )
    mv "$TARGET_DIR/$IMG_NAME" "$TARGET_DIR/$DEVICE_NAME.$IMG_NAME_CUT"
  # set new root directory
    cd "$TARGET_DIR"
    cd ..
    sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf
  echo "${Green}>>>Start partition restore process ${Color_Off}"
    sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k -p true restoreparts "$INPUT_FILE" "$DEVICE_NAME"
  echo "${Red}>>>Cleanup temp files ${Color_Off}"
    rm -rf "$TARGET_DIR"
}

# }}}
#-------- Virtualbox CLI {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=4pguqqygAd0
# DESC: Virtualbox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use
# REFF: https://www.howtoforge.com/tutorial/running-virtual-machines-with-virtualbox-5.1-on-a-headless-ubuntu-16.04-lts-server/

vbx-list() {
  echo "===Available VM==="
  vboxmanage list vms
  echo "\n===Running VM====="
  vboxmanage list runningvms
}

vbx-dvdrom() {
  if [ $# -lt 2 ]; then
    echo -e "Mount an ISO Image as a DVDROM/CDROM Image on a Running Virtualbox VM"
    echo -e "\nUsage: $0 <vmname> <iso_image>"
    echo -e "\nExample: $0 'Windows 7' 'foobar.iso'"
    echo "\n===Running VM====="
    vboxmanage list runningvms
    return 1
  fi

  vboxmanage storageattach "$1" --storagectl IDE --port 1 --device 0 --type dvddrive --medium "$2"
}

# https://antonyjepson.wordpress.com/2012/01/26/quickly-attaching-usb-devices-to-virtualbox-guests-using-vboxmanage/
# http://tiebing.blogspot.com/2012/07/virtualbox-usb-from-command-line.html
vbx-usb() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list usbhost | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage startvm "$vm_name" --type headless
        echo -e "${Green} $vm_name Has Been Started ${Color_Off}"
      fi
      break
    done
  done
}

vbx-start() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list vms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage startvm "$vm_name" --type headless
        echo -e "${Green} $vm_name Has Been Started ${Color_Off}"
      fi
      break
    done
  done
}

vbx-quit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" acpipowerbutton
        echo -e "${Yellow} $vm_name Is Shutting Down ${Color_Off}"
      fi
      break
    done
  done
}

vbx-forcequit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" poweroff
        echo -e "${Red} $vm_name Power Cable Has Been Pulled ${Color_Off}"
      fi
      break
    done
  done
}
# }}}
#-------- Fuzzy Finder {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
# DESC: interactive fuzzy string matching
# LINK: https://github.com/junegunn/fzf


rofi-fzf() { $(declare -f | awk '/fzf-/ {print $1}' | grep -i fzf | fzf -e -i) ;}

# fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i | awk '{$1=$1};1')" | xclip -selection clipboard ;}
fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard ;}
fzf-bookmarkscli() { sr "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-bookmarks() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-bookmarks2clipboard() { echo -n "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" | awk '{print $2}' | xclip -selection clipboard ;}
fzf-bookmarkstor() { surfraw -browser=tor-browser-en "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
fzf-tor() { torify w3m "$(cat ~/.config/surfraw/bookmarks | awk 'NF != 0 && !/^#/ && /\.onion/' |fzf -e -i | awk '{print $2}')" ;}

vf() { fzf | xargs -r -I % $EDITOR % ;}

fzf-launcher() {
  # note: xdg-open has a bug with .desktop files, so we cant use that shit
  selected="$(ls /usr/share/applications | fzf -e -i )"
  nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
  # disown if exit 0 successfully
  if [[ $? = 0 ]] ; then disown; fi
}

# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
# https://github.com/junegunn/fzf/wiki/examples#browsing-history
fzf-chromium_history() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  # macos
  # cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
  # linux
  \cp -f ~/.config/chromium/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
  # fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}


fzf-locate() {
  # xdg-open "$(locate "*" | fzf -e -i )"
  # xdg-open "$(locate home media | fzf -e -i )" >/dev/null 2>&1 & disown
  xdg-open "$(locate \
    -d /var/lib/mlocate/mlocate.db \
    -d ~/.updatedb/bingbong.db \
    -d ~/.updatedb/kamui.db \
    -d ~/.updatedb/wiiiso.db \
    home media \
    | fzf -e -i )" >/dev/null 2>&1 & disown


  # some programs require a longer time to load
  # sleep 1.5

  # if cancle or fail then exit
  # if [ $? -ne 0 ]
  # then
  #  	exit
  # fi
}


# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# edit single line snippet
cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
fzf-snippet() {
  selected="$(cat ~/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
  # remove tags, leading and trailing spaces, also no newline
  echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
}

fzf-multisnippet() {
  # location of snippets
  dir=~/.multisnippet

  # merge filename and tags into single line
  results=$(for FILE in $dir/*
  do
    getname=$(basename $FILE)
    gettags=$(head -n 1 $FILE)
    echo -e "$getname \t $gettags"
  done)

  # copy content into clipboard without tags
  filename=$(echo "$(echo "$results" | fzf -e -i )" | cut -d' ' -f 1)
  sed 1d $dir/$filename | xclip -selection clipboard
}

#}}}
#-------- FFMPEG X11GRAB Screencasting v2 (Mic + Speakers) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture multiple source aka mic/speaker/others...etc)
# REFF: https://ask.fedoraproject.org/en/question/65662/recording-audio-from-mic-and-speakers-from-commandline/
#       https://www.youtube.com/watch?v=mEV2O8C272g (MrWhat record mic & speakers)
#       https://www.youtube.com/watch?v=Xbzh-T2kfJk (MrWhat keep audio synced)
#       https://www.youtube.com/watch?v=ynjFXmcpExE (MrWhat framedrop)

# ffmpeg location
# FFX_RECORDER=/usr/bin/ffmpeg
FFX_RECORDER=~/.bin/compile/ffmpeg-2.1.3/bin/ffmpeg

# [OUTPUT_DEVICE] speakers audio source (PC speakers or Headphones)
# note: using headphones since pc speakers will have audio feedback to mic
FFX_SPEAKER="alsa_output.pci-0000_00_14.2.analog-stereo.monitor"
FFX_SPEAKER_CH="2"
FFX_SPEAKER_FREQ="44100"
# FFX_SPEAKER="alsa_output.usb-NA_Lenovo_Wireless_Headset_W770-00.analog-stereo.monitor"
# FFX_SPEAKER_CH="2"
# FFX_SPEAKER_FREQ="32000"

# [INPUT_DEVICE] mic audio source
# note: when routed to pulseaudio the mic is very low
# so open pavucontrol > input device > [name of mic]
# then slide volume all the way to the right
# example: http://i.imgur.com/GFkifqB.png
# FFX_MIC="alsa_input.usb-BLUE_MICROPHONES_Blue_Snowball-00.analog-mono"
# FFX_MIC_CH="1"
# FFX_MIC_FREQ="44100"
FFX_MIC="alsa_input.usb-NA_Lenovo_Wireless_Headset_W770-00.analog-mono"
FFX_MIC_CH="2"
FFX_MIC_FREQ="44100"

# sound system
FFX_SOUNDSYS="pulse"
# FFX_SOUNDSYS="alsa"

# resolution
FFX_RESO_FULL=$(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1)

# output location
FFX_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FFX_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FFX_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

ffxcast_fullscreen_movie() {
  $FFX_RECORDER \
  -f $FFX_SOUNDSYS -ac $FFX_SPEAKER_CH -ar $FFX_SPEAKER_FREQ -i $FFX_SPEAKER \
  -f $FFX_SOUNDSYS -ac $FFX_MIC_CH -ar $FFX_MIC_FREQ -i $FFX_MIC \
  -f x11grab -r 30 -s $FFX_RESO_FULL -i :0.0 \
  -filter_complex "[0]asyncts[spkr],[1]asyncts[mic],[spkr][mic]amix=inputs=2" \
  -c:v libx264 -pix_fmt yuv420p -preset ultrafast -crf 0 \
  -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
  -y $FFX_OUTPUT_MOVIE
}

# ffxcast_fullscreen_movie() {
#   $FFX_RECORDER \
#   -f $FFX_SOUNDSYS -ac $FFX_SPEAKER_CH -ar $FFX_SPEAKER_FREQ -i $FFX_SPEAKER \
#   -f $FFX_SOUNDSYS -ac $FFX_MIC_CH -ar $FFX_MIC_FREQ -i $FFX_MIC \
#   -thread_queue_size 512 -f x11grab -r 30 -s $FFX_RESO_FULL -i :0.0 \
#   -filter_complex "[0]asyncts[spkr],[1]asyncts[mic],[spkr][mic]amix=inputs=2" \
#   -c:v libx264 -pix_fmt yuv420p -preset ultrafast -crf 0 \
#   -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
#   -y $FFX_OUTPUT_MOVIE
# }

# -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
# -acodec libmp3lame -ab 128k -ar 44100 -threads 0 -y $FF_OUTPUT_MOVIE

# ffmpeg \
# -f pulse -ac 2 -ar 44100 -i alsa_input.usb-BLUE_MICROPHONE_Blue_Snow­ball_201306-00-Snowball.analog-stereo \
# -f pulse -ac 2 -ar 44100 -i alsa_output.pci-0000_00_1b.0.analog-ster­eo.monitor \
# -f pulse -ac 2 -ar 44100 -i alsa_output.usb-Logitech_Inc_Logitech_US­B_Headset_H540_00000000-00-H540.iec958-s­tereo.monitor \
# -f x11grab -framerate 30 -video_size 1920x1080 -i :0 \
# -filter_complex \
# "[0]asyncts[m], \
# [1]asyncts[d], \
# [2]asyncts[h], \
# [m][d][h]amix=inputs=3" \
# -c:v libx264 -preset veryfast -crf 18 -pix_fmt yuv420p \
# -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
# /home/b/Videos/AudioSync/AsyncTS_20150206.mkv

# different PRESET
# 1. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 2. -c:v libx264 -preset superfast -crf 18: Produced a 40.4 MB file at ~48-53% CPU load
# 3. -c:v libx264 -preset veryfast -crf 18: Produced a 26.1 MB file at ~62-78% CPU load

# different CRF
# 1. -c:v libx264 -preset ultrafast -crf 0 (Lossless): Produced a 471.7 MB file at ~32-50% CPU load
# 2. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 3. -c:v libx264 -preset ultrafast -crf 23: Produced a 67.1 MB file at ~32-45% CPU load
# 4. -c:v libx264 -preset ultrafast -crf 28: Produced a 31.1 MB file at ~30-40% CPU load

# image quality each setting produces (images are zoomed to in 285%)
# https://imgur.com/XF6t2Cv


# }}}
#-------- Clipboard and Upload {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=fKP0FLp3uW0 (xclip)
# 	https://www.youtube.com/watch?v=Ww7Sl4d8F8A (pastebinit)
# DESC: copy/paste for linux machines (Mac style)

alias pbcopy='xclip -selection clipboard'	# copy to clipboard, ctrl+c, ctrl+shift+c
alias pbpaste='xclip -selection clipboard -o'	# paste from clipboard, ctrl+v, ctrl+shitt+v
alias pbselect='xclip -selection primary -o'	# paste from highlight, middle click, shift+insert
alias pbnoformatting='xclip -selection clipboard -o | xclip -selection clipboard'


# dump text from clipboard to pastebin server and copy link
alias pbclipboard2slexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
alias pbclipboard2sprungeus="pbpaste | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbclipboard2ixio="pbpaste | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbclipboard2pastebindotcom='pbpaste | pastebinit -b "pastebin.com" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'

alias pbuploadslexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
alias pbuploadsprungeus="cat "$@" | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
alias pbuploadixio="cat "$1" | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"



# }}}
#-------- Task-Spooler - Queue Task on The Fly {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

alias tsp-ranger='TS_SOCKET=/tmp/ranger tsp'
alias tsp-notoolrush='TS_SOCKET=/tmp/notoolrush tsp'
alias tsp-shorttask='TS_SOCKET=/tmp/shorttask tsp'
alias tsp-mediumtask='TS_SOCKET=/tmp/mediumtask tsp'
alias tsp-w3m='TS_SOCKET=/tmp/w3m tsp'
alias tsp-avd='TS_SOCKET=/tmp/avd tsp'


# }}}
#-------- Archive Integrity Check {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com
# DESC: Check if archive is corrupted
# REFF: https://unix.stackexchange.com/questions/42287/terminating-an-infinite-loop

archive-integrity-zip() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo "${Red}>>>Check for Bad or Invalid errors ${Color_Off}"
  echo "${Red}>>>=============================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo "${Green}Testing File: $arg ${Color_Off}"
    unzip -tq "$arg" >> "$LOGFILE" || break
  done
}

archive-integrity-rar() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo "${Red}>>>Check for errors ${Color_Off}"
  echo "${Red}>>>================ ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo "${Green}Testing File: $arg ${Color_Off}"
    unrar t "$arg" >> "$LOGFILE" || break
  done
}

archive-integrity-7z() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo "${Red}>>>Check for Sub items Errors ${Color_Off}"
  echo "${Red}>>>========================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo "${Green}Testing File: $arg ${Color_Off}"
    7z t "$arg" >> "$LOGFILE" || break
  done
}



# archive-integrity-7z() {
#   NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
#   LOGFILE=~/Downloads/_errorcheck_"$NOSPACES".log
#   echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
#   echo "${Red}>>>Check for Sub items Errors ${Color_Off}"
#   ls -1 *.7z | while read line
#   do
#     7z t $line >> "$LOGFILE" || break
#   done
# }
#
# archive-integrity-rar() {
#   NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
#   LOGFILE=~/Downloads/_errorcheck_"$NOSPACES".log
#   echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
#   ls -1 *.rar | while read line
#   do
#     unrar t $line >> "$LOGFILE" || break
#   done
# }

whileloop() {
while true
  do
    ./your-script
  sleep 5
  done

}

# checkcorruption-zip() { find . -name '*.zip' -exec unzip -tq {} \; ;}
# checkcorruption-ziplog() { find . -name '*.zip' -exec unzip -tq {} \; > _errorcheck_"$(basename "$PWD")"_zip.log ;}
# checkcorruption-7z() { find . -name '*.7z' -exec 7z t {} \; ;}
# checkcorruption-7zlog() { find . -name '*.7z' -exec 7z t {} \; > _errorcheck_7z.log;}



# errorcheck-7z2() {
#   ls -1 *.7z | while read line
#   do 7z t $line >> _7zerror.log
#   done
# }
#
# errorstart() {
# for f in *; do
#   echo "File -> $f"
# done
# }



# }}}
#-------- Alias Custom {{{
#------------------------------------------------------
# alias sudo='sudo -i'
# alias sudo='sudo '					# make aliases work with sudo
# alias ps="ps aux | grep -v grep | grep "
# alias ff="find . |grep "
# alias pp="ps aux |grep "
# alias oo="xdg-open "

# For emergencies
alias asdf='setxkbmap fr bepo'

alias xclipin='xclip -sel c -in <'
alias xclipout='xclip -sel c -out >'
alias psg='ps aux|grep -v grep|grep -i '
psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
alias sshxforwarding='ssh -XCc blowfish-cbc,arcfour'
alias sshxtrusted='ssh -Y'
alias stackexchange='lynx http://column80.com'		# lookup information
alias xev-keycode="xev | grep 'keycode\|button'"
# alias weechat='weechat-curses'
alias lsd='ls -1d */'					# ls folders only
alias l='ls -l'
alias lsf='ls --color=always -p | grep -v '/$''		# ls files only
alias lsa='ls -GghA'
alias lsx='ls -lX'
# alias lst='ls -Ggthrc'				# ls by time/changes, newest at bottom



# }}}
#-------- Functions {{{
#------------------------------------------------------

unlock() { keepassc -d ~/.keepass/masterlock.kdb ;}


# change font size (guake terminal)
# tutorial video: http://www.youtube.com/watch?v=i9aKFgxOjwQ
chfontsize() {
  # guake
  gconftool-2 --set '/apps/guake/style/font/style' --type string "Monospace ${1:-16}"

  #gnome-terminal
  dconf write /org/gnome/terminal/legacy/profiles:/$(dconf list /org/gnome/terminal/legacy/profiles:/)font "'Monospace ${1:-16}'"
}



# view markdown as manpages
# http://blog.metamatt.com/blog/2013/01/09/previewing-markdown-files-from-the-terminal/
mdless(){ pandoc -s -f markdown -t man "$*" | groff -T utf8 -man | less ;}

# quickly cd out of directories using numbers, example: up 2
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

# show file access permission
# http://unix.stackexchange.com/a/46921
file-permission() { stat --format '%a %n' "$@" ;}

# display mime of file application/zip, application/x-tar
file-type() { file --mime-type -b "$@" ;}

# call vim help page from shell prompt
function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

# searches for manual locally or online
manned() {
  for arg in "$@"; do man $arg 2> /dev/null \
  || $arg -H 2> /dev/null || $arg -h 2> /dev/null \
  || $arg --help-all 2> /dev/null || $arg --help 2> /dev/null \
  || help $arg 2> /dev/null \
  || $BROWSERCLI "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || $BROWSER "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || open "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || xdg-open "http://manned.org/browse/search?q=$@"
  done
}

# search commandlinefu.com
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
	| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

# display one random command from commandlinefu.com
cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}


# w3m browser with inline images
# https://plus.google.com/102499719144563443986/posts/Vja8W69iHoi
# tutorial video: http://www.youtube.com/watch?v=R2bMUtCOGko
w3mimg() { w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay $1 ;}

#}}}
#-------- Screenshot {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=Hh8G1aBp8gc
# DESC: take screenshot fullscreen, single window or draw a box
export PATH_SCREENSHOT=~/Pictures/screenshots
pix() { scrot -d 5 "$PATH_SCREENSHOT/fullscr_`date +'%F_%Hh%Ms%S'`.png" ;}
pix-area() { sleep 2 && scrot -s "$PATH_SCREENSHOT/windowed_`date +'%F_%Hh%Ms%S'`.png" ;}

# }}}
#-------- Convert to iOS (iPod, Macs, iPhone, Apple TV) {{{
#------------------------------------------------------
# https://trac.handbrake.fr/wiki/BuiltInPresets

convert-to-iOS-ipod() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's low resolution settings for the iPod (5G and up)"
    echo -e "Optimized for great playback on the iPod screen, with smaller file size."
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ipod.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.ipod.mp4" --preset="iPod"
    done
  done
}

convert-to-iOS-universal() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's universally compatible, full resolution settings for all current Apple devices"
    echo -e "iPod (6G and up), iPhone, AppleTV, and Macs"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".universal.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.universal.mp4" --preset="Universal"
    done
  done
}

convert-to-iOS-iphone() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".iphone.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.iphone.mp4" --preset="iPhone & iPod touch"
    done
  done
}

convert-to-iOS-ipodtouch() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ipodtouch.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.ipodtouch.mp4" --preset="iPhone & iPod touch"
    done
  done
}

convert-to-iOS-ipad() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ipad.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.ipad.mp4" --preset="iPad"
    done
  done
}

convert-to-iOS-appletv() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's settings for the AppleTV and 2009's iPhone and iPod Touch lineup. Provides a good balance between quality and file size, and pushes the devices to their limits. Includes Dolby Digital 5.1 AC3 sound for the AppleTV."
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".appletv.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv.mp4" --preset="AppleTV"
    done
  done
}

convert-to-iOS-appletv2() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".appletv2.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv2.mp4" --preset="AppleTV 2"
    done
  done
}

convert-to-iOS-appletv3() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".appletv3.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv3.mp4" --preset="AppleTV 3"
    done
  done
}

# }}}
#-------- Convert to Android (Smartphone, Tablet) {{{
#------------------------------------------------------
convert-to-android-mobile() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".androidmobile.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.androidmobile.mp4" --preset="Android"
    done
  done
}

convert-to-android-tablet() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".androidtablet.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.androidtablet.mp4" --preset="Android Tablet"
    done
  done
}

# }}}
#-------- Convert to Gaming (PSP Video ...etc) {{{
#------------------------------------------------------
# http://develop.participatoryculture.org/index.php/ConversionMatrix

convert-to-gaming-psp() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".psp.mp4 ]
    do
      ffmpeg -i "$arg" -s 320x240 -b:v 512000 -ar 24000 -ab 64000 -f psp -r 29.97 -strict experimental "${arg%.*}".psp.mp4
    done
  done
}

convert-to-windowsphone8() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".windowsphone8.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.windowsphone8.mp4" --preset="Windows Phone 8"
    done
  done
}

# }}}
#-------- VimWiki {{{
#------------------------------------------------------
wikimd()     { $EDITOR ~/.vimwiki/wikimd/index.md ;}
# }}}
#-------- Slice Videos {{{
#------------------------------------------------------

# movie = both audio & video
# audiotrack = audio only
# videotrack = video only

# mplayer OSD in milliseconds
mplayer-milliseconds() { mplayer -osd-fractions 1 -osdlevel 3 "$1" -ss "${2:-00:00:00}" ;}

slice_testing() {
  ffmpeg -i "$1" -ss "$2" -to "$3" -c copy cut.mp4
}

slice-movie() {
  if [ $# -lt 3 ]
  then
    echo -e "Use ffmpeg to cut movie (video & audio tracks) without converting"
    echo -e "\nUsage:\n$0 <filename> hh:mm:ss hh:mm:ss"
    echo -e "$0 filename.mp4 00:01:00 00:05:00"
    return 1
  fi
  ffmpeg -i "$1" -ss "$2" -to "$3" -codec:v copy -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
}

# slice_movie() {
#     if [ $# -lt 5 ]
#     then
#         echo -e "Use ffmpeg to slice movie (video & audio tracks) with beginning and endpoint with accurate milliseconds"
#         echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
#         echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"
#
#         return 1
#     fi
#
#     # code
#     BEGINTIME=${2}
#     ENDTIME=${4}
#
#     # Convert the times to seconds from the Epoch
#     SEC1=`date +%s -d ${BEGINTIME}`
#     SEC2=`date +%s -d ${ENDTIME}`
#
#     # Use expr to do the math
#     DIFFSEC=`expr ${SEC2} - ${SEC1}`
#     DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`
#
#     ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -codec:v copy -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
#
# }

slice_videotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice videotrack (no audio) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -an -codec:v copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"

}

slice_audiotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice audiotrack (no video) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -vn -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
}

# }}}
#-------- Webcam {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=oYTE3docGLA
# DESC: using external player to display webcam

# mplayer to display webcam
# hit 's' to take screenshot, will save in current folder
# hit 'S' to take series of screenshot, will save in current folder
# hit 'f' to toggle fullscreen
# hit 'T' to toggle stay-on-top
# hit 'q' or 'Esc' to quit
# https://wiki.archlinux.org/index.php/Webcam_Setup#MPlayer
webcam-list() { v4l2-ctl --list-formats-ext && v4l2-ctl --list-devices ;}
webcam-mplayer() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -ontop -geometry "99%:95%" ;}
webcam-mplayer-noborder() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -geometry "98%:98%" -ontop -noborder ;}
webcam-mplayer-screenshot() { mplayer tv:// -tv driver=v4l2:width=1920:height=1080:device=/dev/video0 -fps 30 -vf screenshot -ontop ;}

# DESC: use webcam to scan for barcode/qrcode
zbarcam-v4l() {
  # barcode/qrcode reader using webcam
  # this is for webcam that was not supported by default
  # https://fitzcarraldoblog.wordpress.com/2012/10/05/installing-and-using-zbar-in-linux-to-scan-bar-codes-with-your-webcam/
  # requires: v4l-utils
  LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam /dev/video0
}
# }}}
#-------- Sound Effects {{{
#------------------------------------------------------
# http://whatnotlinux.blogspot.com/2011/12/enterprise-ambiance.html
ambiance-whitenoise() { play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25  fade h 1 864000 1 ;}
ambiance-whitenoisewider() { play -n -c2 synth whitenoise band -n 100 24 band -n 300 100 gain +20 ;}
ambiance-pinknoise() { play -c2 -n synth pinknoise band -n 280 80 band -n 60 25 gain +20 treble +40 500 bass -3 20 flanger 4 2 95 50 .3 sine 50 lin ;}

#}}}
#-------- Archive Manager CLI {{{
#------------------------------------------------------
archive-append() { atool -a "$@" ;}
archive-extract-logs() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo "${Red}>>>Extracting Files ${Color_Off}"
  echo "${Red}>>>=============================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo "${Green}Current File: $arg ${Color_Off}"
    atool -x "$arg" >> "$LOGFILE" || break
  done
}
archive-extract() { atool -x "$@" ;}
archive-extract-vpk() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    atool -x "$arg"
  done
}

archive-list() { atool -l "$1" | less -N ;}
archive-search() { atool -l "$1" | grep -i "$2" ;}

# create archive
archive-create-7z() { atool -a archive.7z "$@" ;}
archive-create-zip() { atool -a archive.zip "$@" ;}
archive-create-rar() { atool -a archive.rar "$@" ;}
archive-create-tar() { atool -a archive.tar "$@" ;}
archive-create-targz() { atool -a archive.tar.gz "$@" ;}
archive-create-cbz() { atool -a archive.zip "$@" && mv -- archive.zip archive.cbz ;}
archive-create-cbr() { atool -a archive.rar "$@" && mv -- archive.rar archive.cbr ;}

# converting archive
convert-to-archive-tar() { arepack -F .tar -e "$@" ;}
convert-to-archive-zip() { arepack -F .zip -e "$@" ;}
convert-to-archive-rar() { arepack -F .rar -e "$@" ;}
convert-to-archive-targz() { arepack -F .tar.gz -e "$@" ;}
convert-to-archive-7z() { arepack -F .7z -e "$@" ;}
convert-to-archive-cbz() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
      arepack -F .zip -e "$arg" && mv "${arg%%.*}".zip "${arg%%.*}".cbz
    else
      if [[ -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
        mv -v "${arg%%.*}".zip "${arg%%.*}".cbz
      fi
    fi
  done
}
convert-to-archive-cbr() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
      arepack -F .rar -e "$arg" && mv "${arg%%.*}".rar "${arg%%.*}".cbr
    else
      if [[ -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
        mv -v "${arg%%.*}".rar "${arg%%.*}".cbr
      fi
    fi
  done
}

#}}}
#-------- Detox Filename Cleanup {{{
#------------------------------------------------------
# DESC: cleanup filename to different styles

# eg. FOO BAR LinuX.TAR.GZ --> foo_bar_linux.tar.gz
detox-unix() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]')
    mv "$arg" "$filter_name"
  done
}

# eg. FOO BAR LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv "$arg" "$filter_name"
  done
}

# eg. FOO-BAR-LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human-dash() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | sed 's/-/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv "$arg" "$filter_name"
  done
}

detox-video() {
  if [ $# -lt 1 ]; then
    echo -e "clean video filename then add [duration,filesize,resolution]"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    # check if file is a valid video before continuing
    get_mimetype=$(file --mime-type -b "$arg" | cut -d '/' -f1)
    if [ "$get_mimetype"  = "video" ]; then
      duration=$(ffmpeg -i "$arg" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,// | cut -d '.' -f1 | awk -F: '{print $1"h"$2"m"$3"s"}')
      filesize=$(du -h "$arg" | awk '{print $1}')
      resolution=$(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height "$arg" | cut -d '=' -f2)
      mv "$arg" "${arg%.*} [${duration},${filesize},${resolution}p].${arg##*.}"
    fi
  done
}

# }}}
#-------- Music Tagging CLI {{{
#------------------------------------------------------
tag-encoding-v2.3() { eyeD3 --encoding=utf8 --to-v2.3 "$@" ;}
tag-encoding-v2.4() { eyeD3 --encoding=utf8 --to-v2.4 "$@" ;}
tag-show() { eyeD3 "$@" ;}
tag-album() { eyeD3 -A "$1" "${@:2}" ;}
tag-albumartist() { eyeD3 -b "$1" "${@:2}" ;}
tag-artist() { eyeD3 -a "$1" "${@:2}" ;}
tag-title() { eyeD3 -t "$1" "${@:2}" ;}
tag-number() { eyeD3 -n "$1" "${@:2}" ;}
tag-genre() { eyeD3 -G "$1" "${@:2}" ;}
tag-listgenre() { eyeD3 --plugin=genres ;}
tag-year() { eyeD3 -Y "$1" "${@:2}" ;}
tag-comment() { eyeD3 -c "$1" "${@:2}" ;}
tag-image-remove() { eyeD3 --remove-all-images "$@" ;}
tag-image-add() { eyeD3 --add-image "$1":FRONT_COVER "${@:2}" ;}
tag-image-extract() { eyeD3 --write-images=. "$@" ;}

# use existing music tags to rename filename
tag-to-filename-num-title() { eyeD3 --rename '$track:num - $title' "$@" ;}
tag-to-filename-albumartist-album-num-title() { eyeD3 --rename '$album_artist - $album - $track:num - $title' "$@" ;}
tag-to-filename-artist-album-num-title() { eyeD3 --rename '$artist - $album - $track:num - $title' "$@" ;}
tag-to-filename-artist-title() { eyeD3 --rename '$artist - $title' "$@" ;}
tag-to-filename-artist-album-title() { eyeD3 --rename '$artist - $album - $title' "$@" ;}


# use existing filename to fill in music tags
# 05 Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-space-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | cut -d ' ' -f1 | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | cut -d ' ' -f2- | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

# 05 - Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

tag-filltag-from-filename-album-dash-num-dash-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    albumname=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $3}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $4}' | awk '{$1=$1};1' )
    eyeD3 --album "$albumname" --track "$tracknum" --artist "$artistname" --album-artist "$artistname" --title "$titlename" "$arg"
  done
}

# Rihanna - Desperado.mp3 --> fill in artist/albumartist/title
tag-filltag-from-filename-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --artist "$artistname" --title "$titlename" "$arg"
  done
}

# Desperado.mp3 --> fill in title
tag-filltag-from-filename-titleonly() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    eyeD3 --title "${arg%.*}" "$arg"
  done
}

# }}}
#-------- IPTV - Manual {{{
#------------------------------------------------------

IPTVPLAYER=cvlc
iptv-new-aljazeera() { "$IPTVPLAYER" 'rtmp://aljazeeraflashlivefs.fplive.net:1935/aljazeeraflashlive-live?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=/aljazeera_eng_high?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=.flv live=1' ;}

iptv-news-abc() { "$IPTVPLAYER" 'http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=500,300,700,900,1200#preview-http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=400' ;}

iptv-sports-motorsport() { "$IPTVPLAYER" 'http://motorsport.hopto.org:8080/' ;}
iptv-sports-pac12() { "$IPTVPLAYER" 'http://xrxs.net/video/live-p12baya-2328.m3u8' ;}
iptv-music-hearttv() { "$IPTVPLAYER" 'http://ooyalahd2-f.akamaihd.net/i/globalradio02_delivery@156522/master.m3u8' ;}
iptv-tv-planetgreen() { "$IPTVPLAYER" 'http://80.80.160.168/live/4/live.m3u8' ;}
iptv-tv-trtworld() { "$IPTVPLAYER" 'http://trtcanlitv-lh.akamaihd.net/i/TRTWORLD_1@321783/index_1500_av-p.m3u8?sd=10&rebase=on' ;}
iptv-music-vevo() { "$IPTVPLAYER" 'http://vevoplaylist-live.hls.adaptive.level3.net/vevo/ch1/06/prog_index.m3u8' ;}
iptv-music-virgintv() { "$IPTVPLAYER" 'http://wow01.105.net/live/virgin1/chunklist.m3u8' ;}

iptv-education-university-of-californiatv() { "$IPTVPLAYER" 'rtmp://ucsdtv-wowza.ucsd.edu:1935/live/live_800' ;}
iptv-sports-bellatorspike() { "$IPTVPLAYER" 'http://spikelive-f.akamaihd.net/i/spikebellator_live1@62376/master.m3u8' ;}

#}}}
#-------- LUKS Disk Encryption (Linux Unified Key Setup) v2 (last update October 23, 2016) {{{
#------------------------------------------------------
# DEMO:
# DESC: setup password protection and disk encryption on storage media
# LINK: https://gitlab.com/cryptsetup/cryptsetup
luks-setup-ext() {
  if [ $# -lt 1 ]; then
    echo -e "format device and apply LUKS disk encryption (Linux Unified Key Setup)"
    echo -e "\nUsage: $0 <fstype:ext2/3/4> <device|partition>"
    echo -e "Example: $0 ext2 sdx"
    echo -e "         $0 ext4 sdx1"
    return 1
  fi
  FSTYPE="$1"
  DEVICE_NAME="$2"
  MAPPERNAME="$DEVICE_NAME"
  echo "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device then try again ${Color_Off}"
      return 1
    fi
  echo "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
    lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
  echo -n "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "${Green}>>>You chose to continue ${Color_Off}"
    else
      return 1
    fi
  echo "${Yellow}>>>Setting up LUKS encryption ${Color_Off}"
    sudo cryptsetup -y -v luksFormat /dev/"$DEVICE_NAME"
    sudo cryptsetup luksOpen /dev/"$DEVICE_NAME" "$MAPPERNAME"
  echo "${Red}>>>Formatting device ${Color_Off}"
    sudo mkfs."$FSTYPE" /dev/mapper/"$MAPPERNAME"
  echo "${Yellow}>>>Changing permission of the filesystem ${Color_Off}"
    mkdir -p -v /tmp/testluks
    sudo mount /dev/mapper/"$MAPPERNAME" /tmp/testluks
    sudo chmod -R 777 /tmp/testluks
  echo "${Green}>>>Change EXT filesystem 5% reserved space to 0% (increase storage space) ${Color_Off}"
    MOUNTED_TESTLUKS=$(df | awk '/testluks/ {print $1}')
    sudo tune2fs -m 0 "$MOUNTED_TESTLUKS"
    sudo tune2fs -l "$MOUNTED_TESTLUKS" | grep --color=auto 'Reserved block count'
  echo "${Red}>>>Unmounting and cleanup ${Color_Off}"
    sudo umount /tmp/testluks
    sudo cryptsetup luksClose "$MAPPERNAME"
    rmdir -v /tmp/testluks
}

# }}}
#-------- LUKS Headers Backup and Restore {{{
#------------------------------------------------------
luks-header-backup() {
  if [ $# -lt 2 ]; then
    echo -e "backup LUKS header"
    echo -e "\nUsage: $0 <output-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  sudo cryptsetup luksHeaderBackup --header-backup-file "$1" /dev/"$2"
  sudo chmod 644 "$1"
}

luks-header-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore LUKS header"
    echo -e "\nUsage: $0 <header-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  sudo cryptsetup luksHeaderRestore --header-backup-file "$1" /dev/"$2"
}

luks-header-close() {
  if [ $# -lt 1 ]; then
    echo -e "close LUKS header"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi
  mappername="$1"
  sudo cryptsetup luksClose "$mappername"
}

luks-header-open() {
  if [ $# -lt 2 ]; then
    echo -e "open LUKS device using external header file"
    echo -e "\nUsage: $0 <header-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  mappername="$2"
  sudo cryptsetup --header "$1" luksOpen /dev/"$2" "$mappername"
}

# }}}
#-------- LUKS Passphrase Management {{{
#------------------------------------------------------
luks-passphrase-list() {
  if [ $# -lt 1 ]; then
    echo -e "list all LUKS key slot"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi
  sudo cryptsetup luksDump /dev/"$1" | grep Slot
}

luks-passphrase-delete() {
  if [ $# -lt 1 ]; then
    echo -e "delete a LUKS passphrase key slot using any existing passphrase"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -n -e "${Red}Which Key Slot Do You Want to Delete? [Number 0-7] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[01234567]$ ]]
  then
    sudo cryptsetup luksKillSlot /dev/"$1" "$REPLY"
  else
    return 1
  fi

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

luks-passphrase-remove() {
  if [ $# -lt 1 ]; then
    echo -e "remove a LUKS passphrase by re-entering the passphrase you want to remove"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -e "${Red}Remove a Key else hit Ctrl+C to cancle ${Color_Off}"
  sudo cryptsetup luksRemoveKey /dev/"$1"

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

luks-passphrase-add() {
  if [ $# -lt 1 ]; then
    echo -e "add new LUKS passphrase (8 slot maximum)"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -e "${Red}Add new Key if Slot is still unused (aka DISABLED) else hit Ctrl+C to cancle ${Color_Off}"
  sudo cryptsetup luksAddKey /dev/"$1"

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

# }}}
#-------- Mount LUKS {{{
#------------------------------------------------------
mount-udisksctl-luks() {
  if [ $# -lt 1 ]
  then
    echo -e "mount LUKS encrypted device like most GUI file manager"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl unlock -b /dev/"$arg"
    sleep 0.1
    dm_mountpoint=$(lsblk -o "KNAME,NAME" | grep -A 1 "$arg" | tail -1 | awk '{print $1}')
    udisksctl mount -b /dev/"$dm_mountpoint"
  done
}

unmount-udisksctl-luks() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount LUKS encrypted device like most GUI file manager"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    dm_mountpoint=$(lsblk -o "KNAME,NAME" | grep -A 1 "$arg" | tail -1 | awk '{print $1}')
    udisksctl unmount -b /dev/"$dm_mountpoint"
    udisksctl lock -b /dev/"$arg"
  done
}

mount-luks() {
  if [ $# -lt 1 ]; then
    echo -e "mount LUKS disk encrypted device"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdX"
    echo -e "         $0 sdX1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    mappername="$arg"

    sudo cryptsetup luksOpen /dev/"$arg" "$mappername"
    mkdir -p /tmp/"$arg"
    sudo mount /dev/mapper/"$mappername" /tmp/"$arg"
  done
}

unmount-luks() {
  if [ $# -lt 1 ]; then
    echo -e "unmount LUKS disk encrypted device"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdX"
    echo -e "         $0 sdX1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    mappername="$arg"

    sudo umount /tmp/"$arg"
    sudo cryptsetup luksClose "$mappername"
    rmdir "/tmp/$arg"
  done
}

# }}}
#-------- LUKS ISO Image Encryption {{{
#------------------------------------------------------
# DEMO:
# DESC: create an encryped LUKS ISO Image to burn to Disc for secure storage
# REFF: http://www.freesoftwaremagazine.com/articles/create_encrypted_disk_image_gnulinux
#       https://forums.gentoo.org/viewtopic-t-480356-start-0.html
luks-isosetup() {
  if [ $# -lt 3 ]; then
    echo -e "create an iso image with LUKS encryption (Linux Unified Key Setup)"
    echo -e "\nUsage: $0 <filesystem:ext2|ext3|ext4> <iso_size> <iso_name>"
    echo -e "Example: $0 ext2 700M MyCD"
    echo -e "         $0 ext3 4.7G MyDVD"
    echo -e "         $0 ext4 25G MyBluray"
    return 1
  fi
  FSTYPE="$1"
  ISO_SIZE="$2"
  ISO_NAME="$3"
  MAPPERNAME="$3"
  echo "${Yellow}>>>Creating empty $ISO_NAME.iso with the size of $ISO_SIZE ${Color_Off}"
    fallocate -l "$ISO_SIZE" "$ISO_NAME".iso
  echo "${Red}>>>Setting up encrypted LUKS ISO image ${Color_Off}"
    sudo cryptsetup -y -v luksFormat "$ISO_NAME".iso
  echo "${Green}>>>Open LUKS ISO image ${Color_Off}"
    sudo cryptsetup luksOpen "$ISO_NAME".iso "$MAPPERNAME"
  echo "${Red}>>>Formatting LUKS ISO filesystem ${Color_Off}"
    sudo mkfs."$FSTYPE" /dev/mapper/"$MAPPERNAME"
  echo "${Red}>>>Changing permission of the LUKS ISO image filesystem ${Color_Off}"
    mkdir -p -v /tmp/testluks
    sudo mount /dev/mapper/"$MAPPERNAME" /tmp/testluks
    sudo chmod -R 777 /tmp/testluks
    sudo umount /tmp/testluks
    sudo cryptsetup luksClose "$MAPPERNAME"
    rmdir -v /tmp/testluks
}

mount-isoluks() {
  if [ $# -lt 1 ]; then
    echo -e "mount LUKS encrypted iso image"
    echo -e "\nUsage: $0 <iso_image>"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    MAPPERNAME="$arg"
    echo "${Green}>>>Open LUKS ISO image ${Color_Off}"
      sudo cryptsetup luksOpen "$arg" "$MAPPERNAME"
    echo "${Yellow}>>>Creating mountpoint directory ${Color_Off}"
      mkdir -p -v /tmp/"$arg"
    echo "${Green}>>>Mount LUKS ISO image to /tmp/$arg ${Color_Off}"
      sudo mount /dev/mapper/"$MAPPERNAME" /tmp/"$arg"
  done
}

unmount-isoluks() {
  if [ $# -lt 1 ]; then
    echo -e "unmount LUKS encrypted iso image"
    echo -e "\nUsage: $0 <iso_image|directory>"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    MAPPERNAME="$arg"
    echo "${Yellow}>>>Unmount LUKS ISO image mountpoint ${Color_Off}"
      sudo umount /tmp/"$arg"
    echo "${Yellow}>>>Close LUKS ISO image ${Color_Off}"
      sudo cryptsetup luksClose "$MAPPERNAME"
    echo "${Yellow}>>>Remove mountpoint directory ${Color_Off}"
      rmdir -v "/tmp/$arg"
  done
}

# }}}


