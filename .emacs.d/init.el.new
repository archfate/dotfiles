;; .emacs.d/init.el

;; ===================================
;; MELPA Package Support
;; ===================================

;; Enables basic packaging support

(require 'package)


;; Adds the Melpa archive to the list of available repositories

(add-to-list 'package-archives

             '("melpa" . "http://melpa.org/packages/") t)


;; Initializes the package infrastructure

(package-initialize)


;; If there are no archived package contents, refresh them

(when (not package-archive-contents)

  (package-refresh-contents))


;; Installs packages

;;

;; myPackages contains a list of package names

(defvar myPackages

  '(better-defaults                 ;; Set up some better Emacs defaults
    elpy
    flycheck
    py-autopep8
    material-theme                  ;; Enable material-theme
    )
  )


;; Scans the list in myPackages

;; If the package listed is not already installed, install it

(mapc #'(lambda (package)

          (unless (package-installed-p package)

            (package-install package)))

      myPackages)

;; ===================================
;; Key Bindings
;; ===================================

;; Edit emacs init.el
(defun open-init-file()
  (interactive)
  (find-file "~/.emacs.d/init.el"))
(global-set-key (kbd "<f2>") 'open-init-file)

;; Bookmark handling
;;
(global-set-key (kbd "<C-f6>") '(lambda () (interactive) (bookmark-set "SAVED")))
(global-set-key (kbd "<f6>") '(lambda () (interactive) (bookmark-jump "SAVED")))

;; ===================================
;; Basic Customization
;; ===================================
 
(setq inhibit-startup-message t)    ;; Hide the startup message

(load-theme 'material t)            ;; Load material theme

;; (global-linum-mode t)               ;; Enable line numbers globally
;; (tool-bar-mode 0)	    ;; turn off toolbar
;; (electric-indent-mode 0)
;; (menu-bar-mode 0)

;; turn off bars
(when (functionp 'menu-bar-mode)
  (menu-bar-mode -1))
(when (functionp 'set-scroll-bar-mode)
  (set-scroll-bar-mode 'nil))
(when (functionp 'mouse-wheel-mode)
  (mouse-wheel-mode -1))
(when (functionp 'tooltip-mode)
  (tooltip-mode -1))
(when (functionp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (functionp 'blink-cursor-mode)
  (blink-cursor-mode -1))

;; Display line and column numbers
(line-number-mode 1)
(column-number-mode 1)

;; Visualize current line motion
(setq line-move-visual t)

;; New line provision at end of files.
(setq require-final-newline t)

;; never kill scratchpad.
(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))


;; file names case insenstive
(setq read-file-name-completion-ignore-case t)

;; yes and no too hard to type y and n instead.
(defalias 'yes-or-no-p 'y-or-n-p)

(add-hook 'after-init-hook 'global-company-mode) ;; Company-mode for all buffers.

(setq-default fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              ;; split-width-threshold 0           ; Split verticly by default
              ;; split-height-threshold nil        ; Split verticly by default
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
(set-language-environment "UTF-8")              ; Set UTF8 coding system
(add-hook 'comint-mode-hook (lambda () (local-set-key (kbd "C-l")
              'clear-comint)))                  ; Set Ctr+l to clear shell

;; ============================================
;; flyspell mode for spell checking everywhere
;; ============================================
(add-hook 'org-mode-hook 'turn-on-flyspell 'append)

;; Disable keys in org-mode
;;    C-c [ 
;;    C-c ]
;;    C-c ;
;;    C-c C-x C-q  cancelling the clock (we never want this)
(add-hook 'org-mode-hook
          '(lambda ()
             ;; Undefine C-c [ and C-c ] since this breaks my
             ;; org-agenda files when directories are include It
             ;; expands the files in the directories individually
             (org-defkey org-mode-map "\C-c[" 'undefined)
             (org-defkey org-mode-map "\C-c]" 'undefined)
             (org-defkey org-mode-map "\C-c;" 'undefined)
             (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined))
          'append)

(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c M-o") 'bh/mail-subtree))
          'append)

(defun bh/mail-subtree ()
  (interactive)
  (org-mark-subtree)
  (org-mime-subtree))
;; =================================
;; Org-Mode
;; =================================
;; org-protocol


;; Activate indent-mode
(add-hook 'org-mode-hook
          (lambda ()
            (org-indent-mode t))
          t)
;; org-mode export markdown
(eval-after-load "org"
  '(require 'ox-md nil t))
(setq org-html-validation-link nil)

;; (org-babel-do-load-languages			;; Run code in org-mode blocks
;;  'org-babel-load-languages
;;  '((python . t)))

;; =================================
;; Org Babel
;; =================================
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (org . t)
         (plantuml . t)
         (latex . t))))
;; ======================================

;; Setup Org-Protocol to associate with Emacs server start.
(server-start)
(require 'org-protocol)
(setq org-export-with-section-numbers nil) ;; remove number heading from export.
(global-set-key "\C-cl" 'org-store-link)

;; set maximum indentation for description lists
(setq org-list-description-max-indent 5)

;; prevent demoting heading also shifting text inside sections
(setq org-adapt-indentation nil)

;; Increase sub-item indentation
(setq org-list-indent-offset 1)

(setq org-src-tab-acts-natively t)  ;; Indentation for org-mode code block

;; Agenda Files
(setq org-agenda-files (quote ("~/org/"
                               "~/orgFiles")))

(global-set-key "\C-ca" 'org-agenda)

;; Log settings
(setq org-log-done (quote time))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)

;; Hide blank lines from displaying in folded.
(setq org-cycle-separator-lines 0)

;; Todo Keywords
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("TOREAD" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("FINISH" :foreground "forest green" :weight bold)
              
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

;; Org Capture
(setq org-directory "~/org")
(setq org-default-notes-file "~/org/refile.org")
;; C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-tag-persistent-alist
        '(("PROJECT" . ?p)
          ("FLAGGED" . ?f)
          ("@Office" . ?o)
          ("@Home" . ?h)
          ("@Computer" . ?c)
          ("@Errands" . ?e)
          ("@Lunchtime" . ?l)))
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
               :clock-in t :clock-resume t :immediate-finish t)
              ("b" "Books" entry (file "~/org/refile.org")
               "** TODO %?\nScheduled: %(format-time-string
\"%<<%Y-%m-%d %a .+1d>>\")\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:" :empty-lines 1)
              ("n" "note" entry (file "~/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %<%A, %d %B %Y>\n** %<%H:%m> %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/refile.org")
               ;; "* %a :website:\n\n%U %?\n\n%:initial")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string
\"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE:
NEXT\n:END:\n")
              ("e" "Movie" entry (file+headline "~/org/watch-list.org" "Entertainments")
               "* %?\n Watched on %T %i" :empty-lines-before 1 :empty-lines-after 1))))


(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))


;; ==================================
;; Youdao dictionary
;; ==================================
;; Enable Cache
(setq url-automatic-caching t)

;; Example Key binding
(global-set-key (kbd "C-c y") 'youdao-dictionary-search-at-point)

;; Lookup difinition at point with mw-thesaurus
(global-set-key (kbd "<f8>") 'mw-thesaurus-lookup-at-point)

;; lookup sentence structure for word
(autoload 'ispell-get-word "ispell")

(defun lookup-word (word)
  (interactive (list (save-excursion (car (ispell-get-word nil)))))
  ;; (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))
  (eww-browse-url (format "https://sentence.yourdictionary.com/%s" word)))

(global-set-key (kbd "<f7>") 'lookup-word) 
;; ==================================
;; Python Header
;; ==================================
(defun my-insert-header ()
  "Asks for file name, date, description, ... and insert at point."
  (interactive)
  (setq cur-file (read-from-minibuffer "file name ? " 
                   (file-name-nondirectory (buffer-file-name))))
  (setq cur-date (org-read-date))
  (setq cur-author "Me")
  (setq cur-description (read-from-minibuffer "description ? "))
  (insert (format "# File: %s \n" cur-file))
  (insert (format "# Date : %s \n" cur-date))
  (insert (format "# Description : %s \n" cur-description))
)
;; ==================================
;; Backups and History
;; ==================================
(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))) ;; points all backups to one directory to free up ~ cluster.

;; pile of save files
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; save history
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))


;; ====================================
;; Open files externally
;; ====================================

(defun prelude-open-with (arg)
  "Open visited file in default external program.

With a prefix ARG always prompt for command to use."
  (interactive "P")
  (when buffer-file-name
    (shell-command (concat
                    (cond
                     ((and (not arg) (eq system-type 'darwin)) "open")
                     ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
                     (t (read-shell-command "Open current file with: ")))
                    " "
                    (shell-quote-argument buffer-file-name)))))
;; ====================================
;; Key and other features
;; ====================================

;; Enable Xclip Clipboard back to back
;; use xclip to copy/paste in emacs-nox
(unless window-system
  (when (getenv "DISPLAY")
    (defun xclip-cut-function (text &optional push)
      (with-temp-buffer	(insert text)
	(call-process-region (point-min) (point-max) "xclip" nil 0 nil "-i" "-selection" "clipboard")))
    (defun xclip-paste-function()
      (let ((xclip-output (shell-command-to-string "xclip -o -selection clipboard")))
	(unless (string= (car kill-ring) xclip-output)
	  xclip-output )))
    (setq interprogram-cut-function 'xclip-cut-function)
    (setq interprogram-paste-function 'xclip-paste-function)
    ))
;; ====================================
;; Development Setup
;; ====================================

;; Enable elpy

(elpy-enable)


;; Enable Flycheck

(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))


;; Enable autopep8

(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (material)))
 '(custom-safe-themes
   (quote
    ("a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" default)))
 '(package-selected-packages
   (quote
    (mw-thesaurus youdao-dictionary pdf-tools material-theme py-autopep8 flycheck elpy better-defaults))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
