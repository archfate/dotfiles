;; .emacs.d/init.el

;; ===================================
;; MELPA Package Support
;; ===================================

;; Enables basic packaging support

(require 'package)


;; Adds the Melpa archive to the list of available repositories

(add-to-list 'package-archives

             '("melpa" . "http://melpa.org/packages/") t)


;; Initializes the package infrastructure

(package-initialize)


;; If there are no archived package contents, refresh them

(when (not package-archive-contents)

  (package-refresh-contents))


;; Installs packages

;;

;; myPackages contains a list of package names

(defvar myPackages

  '(better-defaults                 ;; Set up some better Emacs defaults
    elpy
    flycheck
    py-autopep8
    blacken
    material-theme                  ;; Theme

    )

  )


;; Scans the list in myPackages

;; If the package listed is not already installed, install it

(mapc #'(lambda (package)

          (unless (package-installed-p package)

            (package-install package)))

      myPackages)

;; ===================================
;; Key Bindings
;; ===================================

;; Edit emacs init.el
(defun open-init-file ()
  (interactive)
  (find-file "~/.emacs.d/init.el"))
(global-set-key (kbd "<f2>") 'open-init-file)

;; ===================================
;; Basic Customization
;; ===================================


(setq inhibit-startup-message t)    ;; Hide the startup message

(load-theme 'material t)            ;; Load material theme

(global-linum-mode t)               ;; Enable line numbers globally

(add-hook 'after-init-hook 'global-company-mode) ;; Company-mode for all buffers.

(setq-default fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
(set-language-environment "UTF-8")              ; Set UTF8 coding system
(add-hook 'comint-mode-hook (lambda () (local-set-key (kbd "C-l")
              'clear-comint)))                  ; Set Ctr+l to clear shell
;; ==================================
;; Python Header
;; ==================================
(defun my-insert-header ()
  "Asks for file name, date, description, ... and insert at point."
  (interactive)
  (setq cur-file (read-from-minibuffer "file name ? " 
                   (file-name-nondirectory (buffer-file-name))))
  (setq cur-date (org-read-date))
  (setq cur-author "Me")
  (setq cur-description (read-from-minibuffer "description ? "))
  (insert (format "# File: %s \n" cur-file))
  (insert (format "# Date : %s \n" cur-date))
  (insert (format "# Description : %s \n" cur-description))
)
;; ==================================
;; Backups and History
;; ==================================
(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))) ;; points all backups to one directory to free up ~ cluster.

;; pile of save files
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; save history
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

;; ;; ====================================
;; ;; Journal
;; ;; ====================================
;; (defun org-journal-file-header-func ()
;;   "Custom function to create journal header."
;;   (concat
;;     (pcase org-journal-file-type
;;       (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
;;       (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
;;       (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
;;       (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))

;; (setq org-journal-file-header 'org-journal-file-header-func)
;; (customize-set-variable 'org-journal-dir "~/orgFiles/Journal")
;; (customize-set-variable 'org-journal-date-format "%A, %d %B %Y")
;; (require 'org-journal)    
 
;; ;; =========================================
;; ;; Org Capture Mode
;; ;; =========================================

;; ;; (setq org-capture-templates
;; ;;   '(    ;; ... other templates

;; ;;     ("j" "Journal Entry"
;; ;;      entry (file "~/orgFiles/Journal/journal.org")
;; ;;      "* %<%A, %d %B %Y>\n** %<%H:%m> %?\n%i "
;; ;;      :empty-lines 1)
;; ;;         ;; ... other templates
;; ;;     ))
;; (setq org-directory "~/orgFiles")
;; ;;(setq org-default-notes-file "~/orFile/")
;; (define-key global-map "\C-cc" 'org-capture)
;; (setq org-capture-templates
;;       '(("t" "todo" entry (file "~/orgFiles/notes/notes.org")
;;          "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
;;         
;;         ("m" "Meeting" entry (file org-default-notes-file)
;;          "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
;;         ("d" "Diary" entry (file "~/orgFiles/Journal/diary.org")
;;          "* %<%A, %d %B %Y>\n** %<%H:%m> %^{Entry Sub-Heading}\n%i%?\n"
;;          :empty-lines 1)
;;         ("i" "Idea" entry (file org-default-notes-file)
;;          "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
;;         ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
;;          "** NEXT %? \nDEADLINE: %t") ))
;; ===================================
;; Org Mode
;; ===================================
;; Activate indent-mode
(add-hook 'org-mode-hook
          (lambda ()
            (org-indent-mode t))
          t)
;; org-mode export markdown
(eval-after-load "org"
  '(require 'ox-md nil t))
(setq org-html-validation-link nil)

(org-babel-do-load-languages			;; Run code in org-mode blocks
 'org-babel-load-languages
 '((python . t)))

(setq org-export-with-section-numbers nil) ;; remove number heading from export.

;; set maximum indentation for description lists
(setq org-list-description-max-indent 5)

;; prevent demoting heading also shifting text inside sections
(setq org-adapt-indentation nil)

;; Increase sub-item indentation
(setq org-list-indent-offset 1)

(setq org-src-tab-acts-natively t)  ;; Indentation for org-mode code block

;; Agenda Files
(setq org-agenda-files (quote ("~/org/"
                               "~/orgFiles")))

(global-set-key "\C-ca" 'org-agenda)
;; Todo Keywords
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "TOREAD(r)" "FINISH(f)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("TOREAD" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("FINISH" :foreground "forest green" :weight bold)
              
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
;; Org Capture
(setq org-directory "~/org")
(setq org-default-notes-file "~/org/refile.org")

;; refile
'(org-refile-targets (quote (("todo.org" :maxlevel . 1)
                             ("notes.org" :level . 2))))
;; C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
               :clock-in t :clock-resume t :immediate-finish t)
              ("b" "Book" entry (file "~/org/refile.org")
               "* %^{TITLE}\n:PROPERTIES:\n:ADDED: %<[%Y-%02m-%02d]>\n:END:%^{AUTHOR}p\n%?" :empty-lines 1)
              ("n" "note" entry (file "~/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %<%A, %d %B %Y>\n** %<%H:%m> %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string
\"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n :STYLE: habit\n:REPEAT_TO_STATE:
NEXT\n:END:\n"))))


;; ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

;; Refile settings
;; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

; Tags with fast selection keys
(setq org-tag-alist (quote ((:startgroup)                            
                            ("@home" . ?H)
                            ("@farm" . ?f)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                            ("PERSONAL" . ?P)
                            ("WORK" . ?W)
                            ("FARM" . ?F)
                            ("ORG" . ?O)
                            ("NORANG" . ?N)
                            ("crypt" . ?E)
                            ("NOTE" . ?n)
                            ("CANCELLED" . ?c)
                            ("FLAGGED" . ??)
                            ("Programing" . ?p)
                            ("Advisory" . ?a)
                            ("References" . ?r)
                            ("Python" . ?p))))

; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)
;; ====================================
;; Open files externally
;; ====================================

(defun prelude-open-with (arg)
  "Open visited file in default external program.

With a prefix ARG always prompt for command to use."
  (interactive "P")
  (when buffer-file-name
    (shell-command (concat
                    (cond
                     ((and (not arg) (eq system-type 'darwin)) "open")
                     ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
                     (t (read-shell-command "Open current file with: ")))
                    " "
                    (shell-quote-argument buffer-file-name)))))
;; ====================================
;; Key and other features
;; ====================================

;; Enable Xclip Clipboard back to back
;; use xclip to copy/paste in emacs-nox
(unless window-system
  (when (getenv "DISPLAY")
    (defun xclip-cut-function (text &optional push)
      (with-temp-buffer
	(insert text)
	(call-process-region (point-min) (point-max) "xclip" nil 0 nil "-i" "-selection" "clipboard")))
    (defun xclip-paste-function()
      (let ((xclip-output (shell-command-to-string "xclip -o -selection clipboard")))
	(unless (string= (car kill-ring) xclip-output)
	  xclip-output )))
    (setq interprogram-cut-function 'xclip-cut-function)
    (setq interprogram-paste-function 'xclip-paste-function)
    ))
;; ====================================
;; Development Setup
;; ====================================

;; Enable elpy

(elpy-enable)


;; Enable Flycheck

(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))


;; Enable autopep8

(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

;; User-Defined init.el ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/org/todo.org" "~/orgFiles/lists/list.org")))
 '(package-selected-packages
   (quote
    (org-journal htmlize flymd xclip material-theme blacken py-autopep8 flycheck elpy better-defaults))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'upcase-region 'disabled nil)
